
STM32F030_I2C_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e8  080034e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080034e8  080034e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034e8  080034e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080034fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080034fc  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007726  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001936  00000000  00000000  0002775a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  00029090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  000297b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e688  00000000  00000000  00029e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8b3  00000000  00000000  00038490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054497  00000000  00000000  00042d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000971da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f4  00000000  00000000  00097230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034a0 	.word	0x080034a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080034a0 	.word	0x080034a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <i2c_write_dma>:
	return rdata;
}

//----------------------------- These function below use by DMA -------------------------//
void i2c_write_dma(I2C_HandleTypeDef *hi2c,uint8_t slave_addr, uint8_t addr_register, uint8_t send_data)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af02      	add	r7, sp, #8
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	000c      	movs	r4, r1
 800022a:	0010      	movs	r0, r2
 800022c:	0019      	movs	r1, r3
 800022e:	1cfb      	adds	r3, r7, #3
 8000230:	1c22      	adds	r2, r4, #0
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	1cbb      	adds	r3, r7, #2
 8000236:	1c02      	adds	r2, r0, #0
 8000238:	701a      	strb	r2, [r3, #0]
 800023a:	1c7b      	adds	r3, r7, #1
 800023c:	1c0a      	adds	r2, r1, #0
 800023e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write_DMA(hi2c, slave_addr, addr_register, 1, &send_data, 1);
 8000240:	1cfb      	adds	r3, r7, #3
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	b299      	uxth	r1, r3
 8000246:	1cbb      	adds	r3, r7, #2
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b29a      	uxth	r2, r3
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	2301      	movs	r3, #1
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	1c7b      	adds	r3, r7, #1
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	2301      	movs	r3, #1
 8000258:	f000 ff2c 	bl	80010b4 <HAL_I2C_Mem_Write_DMA>
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b003      	add	sp, #12
 8000262:	bd90      	pop	{r4, r7, pc}

08000264 <main>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 f9f2 	bl	8000650 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f810 	bl	8000290 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f8d2 	bl	8000418 <MX_GPIO_Init>
  MX_DMA_Init();
 8000274:	f000 f8b2 	bl	80003dc <MX_DMA_Init>
  MX_I2C1_Init();
 8000278:	f000 f870 	bl	800035c <MX_I2C1_Init>

  i2c_write_dma(&hi2c1, SLAVE_ADDR, MPR121_RESET, 0x63);
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <main+0x28>)
 800027e:	2363      	movs	r3, #99	; 0x63
 8000280:	2280      	movs	r2, #128	; 0x80
 8000282:	21b4      	movs	r1, #180	; 0xb4
 8000284:	f7ff ffcc 	bl	8000220 <i2c_write_dma>

  while (1)
 8000288:	e7fe      	b.n	8000288 <main+0x24>
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	2000006c 	.word	0x2000006c

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b095      	sub	sp, #84	; 0x54
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	2420      	movs	r4, #32
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2330      	movs	r3, #48	; 0x30
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f003 f8f5 	bl	8003490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	2310      	movs	r3, #16
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	0018      	movs	r0, r3
 80002ac:	2310      	movs	r3, #16
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f003 f8ed 	bl	8003490 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b6:	003b      	movs	r3, r7
 80002b8:	0018      	movs	r0, r3
 80002ba:	2310      	movs	r3, #16
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f003 f8e6 	bl	8003490 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002c4:	0021      	movs	r1, r4
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2203      	movs	r2, #3
 80002ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2201      	movs	r2, #1
 80002d0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2201      	movs	r2, #1
 80002d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2210      	movs	r2, #16
 80002dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2202      	movs	r2, #2
 80002e2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2280      	movs	r2, #128	; 0x80
 80002e8:	0252      	lsls	r2, r2, #9
 80002ea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2280      	movs	r2, #128	; 0x80
 80002f0:	0352      	lsls	r2, r2, #13
 80002f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f002 fb89 	bl	8002a14 <HAL_RCC_OscConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000306:	f000 f8ad 	bl	8000464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	2110      	movs	r1, #16
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2207      	movs	r2, #7
 8000310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2202      	movs	r2, #2
 8000316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2101      	movs	r1, #1
 8000328:	0018      	movs	r0, r3
 800032a:	f002 fe8d 	bl	8003048 <HAL_RCC_ClockConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000332:	f000 f897 	bl	8000464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000336:	003b      	movs	r3, r7
 8000338:	2220      	movs	r2, #32
 800033a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	003b      	movs	r3, r7
 8000344:	0018      	movs	r0, r3
 8000346:	f002 ffb1 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800034e:	f000 f889 	bl	8000464 <Error_Handler>
  }
}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b015      	add	sp, #84	; 0x54
 8000358:	bd90      	pop	{r4, r7, pc}
	...

0800035c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	; (80003d4 <MX_I2C1_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000368:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <MX_I2C1_Init+0x7c>)
 800036a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000374:	2201      	movs	r2, #1
 8000376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800037e:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_I2C1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_I2C1_Init+0x74>)
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fdf5 	bl	8000f88 <HAL_I2C_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003a2:	f000 f85f 	bl	8000464 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <MX_I2C1_Init+0x74>)
 80003a8:	2100      	movs	r1, #0
 80003aa:	0018      	movs	r0, r3
 80003ac:	f002 fa9a 	bl	80028e4 <HAL_I2CEx_ConfigAnalogFilter>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003b4:	f000 f856 	bl	8000464 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <MX_I2C1_Init+0x74>)
 80003ba:	2100      	movs	r1, #0
 80003bc:	0018      	movs	r0, r3
 80003be:	f002 fadd 	bl	800297c <HAL_I2CEx_ConfigDigitalFilter>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f84d 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	2000006c 	.word	0x2000006c
 80003d4:	40005400 	.word	0x40005400
 80003d8:	2000090e 	.word	0x2000090e

080003dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_DMA_Init+0x38>)
 80003e4:	695a      	ldr	r2, [r3, #20]
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_DMA_Init+0x38>)
 80003e8:	2101      	movs	r1, #1
 80003ea:	430a      	orrs	r2, r1
 80003ec:	615a      	str	r2, [r3, #20]
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_DMA_Init+0x38>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	2201      	movs	r2, #1
 80003f4:	4013      	ands	r3, r2
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	200a      	movs	r0, #10
 8000400:	f000 fa36 	bl	8000870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000404:	200a      	movs	r0, #10
 8000406:	f000 fa48 	bl	800089a <HAL_NVIC_EnableIRQ>

}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b002      	add	sp, #8
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	40021000 	.word	0x40021000

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <MX_GPIO_Init+0x48>)
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_GPIO_Init+0x48>)
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	03c9      	lsls	r1, r1, #15
 8000428:	430a      	orrs	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_GPIO_Init+0x48>)
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	03db      	lsls	r3, r3, #15
 8000434:	4013      	ands	r3, r2
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_GPIO_Init+0x48>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <MX_GPIO_Init+0x48>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0289      	lsls	r1, r1, #10
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <MX_GPIO_Init+0x48>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	029b      	lsls	r3, r3, #10
 8000450:	4013      	ands	r3, r2
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]

}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	40021000 	.word	0x40021000

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	e7fe      	b.n	800046c <Error_Handler+0x8>
	...

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <HAL_MspInit+0x44>)
 8000478:	699a      	ldr	r2, [r3, #24]
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <HAL_MspInit+0x44>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	619a      	str	r2, [r3, #24]
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <HAL_MspInit+0x44>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	2201      	movs	r2, #1
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_MspInit+0x44>)
 8000490:	69da      	ldr	r2, [r3, #28]
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <HAL_MspInit+0x44>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	0549      	lsls	r1, r1, #21
 8000498:	430a      	orrs	r2, r1
 800049a:	61da      	str	r2, [r3, #28]
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <HAL_MspInit+0x44>)
 800049e:	69da      	ldr	r2, [r3, #28]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	055b      	lsls	r3, r3, #21
 80004a4:	4013      	ands	r3, r2
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b002      	add	sp, #8
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b08b      	sub	sp, #44	; 0x2c
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	2414      	movs	r4, #20
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	0018      	movs	r0, r3
 80004c6:	2314      	movs	r3, #20
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f002 ffe0 	bl	8003490 <memset>
  if(hi2c->Instance==I2C1)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a30      	ldr	r2, [pc, #192]	; (8000598 <HAL_I2C_MspInit+0xe0>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d159      	bne.n	800058e <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <HAL_I2C_MspInit+0xe4>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b2f      	ldr	r3, [pc, #188]	; (800059c <HAL_I2C_MspInit+0xe4>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b2c      	ldr	r3, [pc, #176]	; (800059c <HAL_I2C_MspInit+0xe4>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	22c0      	movs	r2, #192	; 0xc0
 80004fa:	00d2      	lsls	r2, r2, #3
 80004fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004fe:	0021      	movs	r1, r4
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2212      	movs	r2, #18
 8000504:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2203      	movs	r2, #3
 8000510:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2204      	movs	r2, #4
 8000516:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	187a      	adds	r2, r7, r1
 800051a:	2390      	movs	r3, #144	; 0x90
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fbc1 	bl	8000ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <HAL_I2C_MspInit+0xe4>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_I2C_MspInit+0xe4>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0389      	lsls	r1, r1, #14
 8000530:	430a      	orrs	r2, r1
 8000532:	61da      	str	r2, [r3, #28]
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <HAL_I2C_MspInit+0xe4>)
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	039b      	lsls	r3, r3, #14
 800053c:	4013      	ands	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <HAL_I2C_MspInit+0xec>)
 8000546:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 800054a:	2210      	movs	r2, #16
 800054c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 8000574:	0018      	movs	r0, r3
 8000576:	f000 f9ad 	bl	80008d4 <HAL_DMA_Init>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800057e:	f7ff ff71 	bl	8000464 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 8000586:	639a      	str	r2, [r3, #56]	; 0x38
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_I2C_MspInit+0xe8>)
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b00b      	add	sp, #44	; 0x2c
 8000594:	bd90      	pop	{r4, r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	40005400 	.word	0x40005400
 800059c:	40021000 	.word	0x40021000
 80005a0:	20000028 	.word	0x20000028
 80005a4:	4002001c 	.word	0x4002001c

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <NMI_Handler+0x4>

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f000 f888 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <DMA1_Channel2_3_IRQHandler+0x14>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fa6b 	bl	8000aba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	20000028 	.word	0x20000028

080005f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <LoopForever+0x6>)
  ldr r1, =_edata
 8000602:	490e      	ldr	r1, [pc, #56]	; (800063c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <LoopForever+0xe>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000618:	4c0b      	ldr	r4, [pc, #44]	; (8000648 <LoopForever+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000626:	f7ff ffe3 	bl	80005f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800062a:	f002 ff0d 	bl	8003448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062e:	f7ff fe19 	bl	8000264 <main>

08000632 <LoopForever>:

LoopForever:
    b LoopForever
 8000632:	e7fe      	b.n	8000632 <LoopForever>
  ldr   r0, =_estack
 8000634:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000640:	080034f0 	.word	0x080034f0
  ldr r2, =_sbss
 8000644:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000648:	200000bc 	.word	0x200000bc

0800064c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_IRQHandler>
	...

08000650 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <HAL_Init+0x24>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_Init+0x24>)
 800065a:	2110      	movs	r1, #16
 800065c:	430a      	orrs	r2, r1
 800065e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 f809 	bl	8000678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000666:	f7ff ff03 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
}
 800066c:	0018      	movs	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40022000 	.word	0x40022000

08000678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HAL_InitTick+0x5c>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <HAL_InitTick+0x60>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	0019      	movs	r1, r3
 800068a:	23fa      	movs	r3, #250	; 0xfa
 800068c:	0098      	lsls	r0, r3, #2
 800068e:	f7ff fd3b 	bl	8000108 <__udivsi3>
 8000692:	0003      	movs	r3, r0
 8000694:	0019      	movs	r1, r3
 8000696:	0020      	movs	r0, r4
 8000698:	f7ff fd36 	bl	8000108 <__udivsi3>
 800069c:	0003      	movs	r3, r0
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 f90b 	bl	80008ba <HAL_SYSTICK_Config>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e00f      	b.n	80006cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80b      	bhi.n	80006ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 f8d8 	bl	8000870 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_InitTick+0x64>)
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	0018      	movs	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b003      	add	sp, #12
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000004 	.word	0x20000004

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x1c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	001a      	movs	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x20>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	18d2      	adds	r2, r2, r3
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_IncTick+0x20>)
 80006f2:	601a      	str	r2, [r3, #0]
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	20000008 	.word	0x20000008
 8000700:	200000b8 	.word	0x200000b8

08000704 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <HAL_GetTick+0x10>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	200000b8 	.word	0x200000b8

08000718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	0002      	movs	r2, r0
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b7f      	cmp	r3, #127	; 0x7f
 800072a:	d809      	bhi.n	8000740 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	001a      	movs	r2, r3
 8000732:	231f      	movs	r3, #31
 8000734:	401a      	ands	r2, r3
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_EnableIRQ+0x30>)
 8000738:	2101      	movs	r1, #1
 800073a:	4091      	lsls	r1, r2
 800073c:	000a      	movs	r2, r1
 800073e:	601a      	str	r2, [r3, #0]
  }
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	0002      	movs	r2, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b7f      	cmp	r3, #127	; 0x7f
 8000760:	d828      	bhi.n	80007b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000762:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <__NVIC_SetPriority+0xd4>)
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b25b      	sxtb	r3, r3
 800076a:	089b      	lsrs	r3, r3, #2
 800076c:	33c0      	adds	r3, #192	; 0xc0
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	589b      	ldr	r3, [r3, r2]
 8000772:	1dfa      	adds	r2, r7, #7
 8000774:	7812      	ldrb	r2, [r2, #0]
 8000776:	0011      	movs	r1, r2
 8000778:	2203      	movs	r2, #3
 800077a:	400a      	ands	r2, r1
 800077c:	00d2      	lsls	r2, r2, #3
 800077e:	21ff      	movs	r1, #255	; 0xff
 8000780:	4091      	lsls	r1, r2
 8000782:	000a      	movs	r2, r1
 8000784:	43d2      	mvns	r2, r2
 8000786:	401a      	ands	r2, r3
 8000788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	019b      	lsls	r3, r3, #6
 800078e:	22ff      	movs	r2, #255	; 0xff
 8000790:	401a      	ands	r2, r3
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	0018      	movs	r0, r3
 8000798:	2303      	movs	r3, #3
 800079a:	4003      	ands	r3, r0
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a0:	481f      	ldr	r0, [pc, #124]	; (8000820 <__NVIC_SetPriority+0xd4>)
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	089b      	lsrs	r3, r3, #2
 80007aa:	430a      	orrs	r2, r1
 80007ac:	33c0      	adds	r3, #192	; 0xc0
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007b2:	e031      	b.n	8000818 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <__NVIC_SetPriority+0xd8>)
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	0019      	movs	r1, r3
 80007bc:	230f      	movs	r3, #15
 80007be:	400b      	ands	r3, r1
 80007c0:	3b08      	subs	r3, #8
 80007c2:	089b      	lsrs	r3, r3, #2
 80007c4:	3306      	adds	r3, #6
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	18d3      	adds	r3, r2, r3
 80007ca:	3304      	adds	r3, #4
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	1dfa      	adds	r2, r7, #7
 80007d0:	7812      	ldrb	r2, [r2, #0]
 80007d2:	0011      	movs	r1, r2
 80007d4:	2203      	movs	r2, #3
 80007d6:	400a      	ands	r2, r1
 80007d8:	00d2      	lsls	r2, r2, #3
 80007da:	21ff      	movs	r1, #255	; 0xff
 80007dc:	4091      	lsls	r1, r2
 80007de:	000a      	movs	r2, r1
 80007e0:	43d2      	mvns	r2, r2
 80007e2:	401a      	ands	r2, r3
 80007e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	019b      	lsls	r3, r3, #6
 80007ea:	22ff      	movs	r2, #255	; 0xff
 80007ec:	401a      	ands	r2, r3
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	0018      	movs	r0, r3
 80007f4:	2303      	movs	r3, #3
 80007f6:	4003      	ands	r3, r0
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <__NVIC_SetPriority+0xd8>)
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	001c      	movs	r4, r3
 8000804:	230f      	movs	r3, #15
 8000806:	4023      	ands	r3, r4
 8000808:	3b08      	subs	r3, #8
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	430a      	orrs	r2, r1
 800080e:	3306      	adds	r3, #6
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	18c3      	adds	r3, r0, r3
 8000814:	3304      	adds	r3, #4
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b003      	add	sp, #12
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	045b      	lsls	r3, r3, #17
 8000838:	429a      	cmp	r2, r3
 800083a:	d301      	bcc.n	8000840 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083c:	2301      	movs	r3, #1
 800083e:	e010      	b.n	8000862 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <SysTick_Config+0x44>)
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	3a01      	subs	r2, #1
 8000846:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000848:	2301      	movs	r3, #1
 800084a:	425b      	negs	r3, r3
 800084c:	2103      	movs	r1, #3
 800084e:	0018      	movs	r0, r3
 8000850:	f7ff ff7c 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <SysTick_Config+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <SysTick_Config+0x44>)
 800085c:	2207      	movs	r2, #7
 800085e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000860:	2300      	movs	r3, #0
}
 8000862:	0018      	movs	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	210f      	movs	r1, #15
 800087c:	187b      	adds	r3, r7, r1
 800087e:	1c02      	adds	r2, r0, #0
 8000880:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	187b      	adds	r3, r7, r1
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b004      	add	sp, #16
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	0002      	movs	r2, r0
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff ff33 	bl	8000718 <__NVIC_EnableIRQ>
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff ffaf 	bl	8000828 <SysTick_Config>
 80008ca:	0003      	movs	r3, r0
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b002      	add	sp, #8
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d101      	bne.n	80008ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e036      	b.n	8000958 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2221      	movs	r2, #33	; 0x21
 80008ee:	2102      	movs	r1, #2
 80008f0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4a18      	ldr	r2, [pc, #96]	; (8000960 <HAL_DMA_Init+0x8c>)
 80008fe:	4013      	ands	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800090a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f998 	bl	8000c70 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2221      	movs	r2, #33	; 0x21
 800094a:	2101      	movs	r1, #1
 800094c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2220      	movs	r2, #32
 8000952:	2100      	movs	r1, #0
 8000954:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}  
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b004      	add	sp, #16
 800095e:	bd80      	pop	{r7, pc}
 8000960:	ffffc00f 	.word	0xffffc00f

08000964 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000972:	2317      	movs	r3, #23
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2220      	movs	r2, #32
 800097e:	5c9b      	ldrb	r3, [r3, r2]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d101      	bne.n	8000988 <HAL_DMA_Start_IT+0x24>
 8000984:	2302      	movs	r3, #2
 8000986:	e04f      	b.n	8000a28 <HAL_DMA_Start_IT+0xc4>
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2220      	movs	r2, #32
 800098c:	2101      	movs	r1, #1
 800098e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2221      	movs	r2, #33	; 0x21
 8000994:	5c9b      	ldrb	r3, [r3, r2]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d13a      	bne.n	8000a12 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2221      	movs	r2, #33	; 0x21
 80009a0:	2102      	movs	r1, #2
 80009a2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2200      	movs	r2, #0
 80009a8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	438a      	bics	r2, r1
 80009b8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	68b9      	ldr	r1, [r7, #8]
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f000 f928 	bl	8000c16 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d008      	beq.n	80009e0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	210e      	movs	r1, #14
 80009da:	430a      	orrs	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	e00f      	b.n	8000a00 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	210a      	movs	r1, #10
 80009ec:	430a      	orrs	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2104      	movs	r1, #4
 80009fc:	438a      	bics	r2, r1
 80009fe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	e007      	b.n	8000a22 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2220      	movs	r2, #32
 8000a16:	2100      	movs	r1, #0
 8000a18:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000a1a:	2317      	movs	r3, #23
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	2202      	movs	r2, #2
 8000a20:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000a22:	2317      	movs	r3, #23
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	781b      	ldrb	r3, [r3, #0]
} 
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b006      	add	sp, #24
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a38:	210f      	movs	r1, #15
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2221      	movs	r2, #33	; 0x21
 8000a44:	5c9b      	ldrb	r3, [r3, r2]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d006      	beq.n	8000a5a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e028      	b.n	8000aac <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	210e      	movs	r1, #14
 8000a66:	438a      	bics	r2, r1
 8000a68:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2101      	movs	r1, #1
 8000a76:	438a      	bics	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	2101      	movs	r1, #1
 8000a84:	4091      	lsls	r1, r2
 8000a86:	000a      	movs	r2, r1
 8000a88:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2221      	movs	r2, #33	; 0x21
 8000a8e:	2101      	movs	r1, #1
 8000a90:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2220      	movs	r2, #32
 8000a96:	2100      	movs	r1, #0
 8000a98:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d004      	beq.n	8000aac <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	4798      	blx	r3
    } 
  }
  return status;
 8000aac:	230f      	movs	r3, #15
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	781b      	ldrb	r3, [r3, #0]
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	409a      	lsls	r2, r3
 8000ada:	0013      	movs	r3, r2
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	d024      	beq.n	8000b2c <HAL_DMA_IRQHandler+0x72>
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	d020      	beq.n	8000b2c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2220      	movs	r2, #32
 8000af2:	4013      	ands	r3, r2
 8000af4:	d107      	bne.n	8000b06 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2104      	movs	r1, #4
 8000b02:	438a      	bics	r2, r1
 8000b04:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b0e:	2104      	movs	r1, #4
 8000b10:	4091      	lsls	r1, r2
 8000b12:	000a      	movs	r2, r1
 8000b14:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d100      	bne.n	8000b20 <HAL_DMA_IRQHandler+0x66>
 8000b1e:	e06a      	b.n	8000bf6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	0010      	movs	r0, r2
 8000b28:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b2a:	e064      	b.n	8000bf6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	2202      	movs	r2, #2
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	d02b      	beq.n	8000b94 <HAL_DMA_IRQHandler+0xda>
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	2202      	movs	r2, #2
 8000b40:	4013      	ands	r3, r2
 8000b42:	d027      	beq.n	8000b94 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	d10b      	bne.n	8000b68 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	210a      	movs	r1, #10
 8000b5c:	438a      	bics	r2, r1
 8000b5e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2221      	movs	r2, #33	; 0x21
 8000b64:	2101      	movs	r1, #1
 8000b66:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b70:	2102      	movs	r1, #2
 8000b72:	4091      	lsls	r1, r2
 8000b74:	000a      	movs	r2, r1
 8000b76:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2220      	movs	r2, #32
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d036      	beq.n	8000bf6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	0010      	movs	r0, r2
 8000b90:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000b92:	e030      	b.n	8000bf6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	2208      	movs	r2, #8
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d028      	beq.n	8000bf6 <HAL_DMA_IRQHandler+0x13c>
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	4013      	ands	r3, r2
 8000baa:	d024      	beq.n	8000bf6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	210e      	movs	r1, #14
 8000bb8:	438a      	bics	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	000a      	movs	r2, r1
 8000bca:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2221      	movs	r2, #33	; 0x21
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2220      	movs	r2, #32
 8000bde:	2100      	movs	r1, #0
 8000be0:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	0010      	movs	r0, r2
 8000bf2:	4798      	blx	r3
    }
   }
}  
 8000bf4:	e7ff      	b.n	8000bf6 <HAL_DMA_IRQHandler+0x13c>
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2221      	movs	r2, #33	; 0x21
 8000c0a:	5c9b      	ldrb	r3, [r3, r2]
 8000c0c:	b2db      	uxtb	r3, r3
}
 8000c0e:	0018      	movs	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b002      	add	sp, #8
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b084      	sub	sp, #16
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	000a      	movs	r2, r1
 8000c32:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b10      	cmp	r3, #16
 8000c42:	d108      	bne.n	8000c56 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000c54:	e007      	b.n	8000c66 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	60da      	str	r2, [r3, #12]
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b004      	add	sp, #16
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <DMA_CalcBaseAndBitshift+0x30>)
 8000c7e:	4694      	mov	ip, r2
 8000c80:	4463      	add	r3, ip
 8000c82:	2114      	movs	r1, #20
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff fa3f 	bl	8000108 <__udivsi3>
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	009a      	lsls	r2, r3, #2
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <DMA_CalcBaseAndBitshift+0x34>)
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	bffdfff8 	.word	0xbffdfff8
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb6:	e14f      	b.n	8000f58 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	000a      	movs	r2, r1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d100      	bne.n	8000cd0 <HAL_GPIO_Init+0x28>
 8000cce:	e140      	b.n	8000f52 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d00b      	beq.n	8000cf0 <HAL_GPIO_Init+0x48>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce4:	2b11      	cmp	r3, #17
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b12      	cmp	r3, #18
 8000cee:	d130      	bne.n	8000d52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	0013      	movs	r3, r2
 8000d00:	43da      	mvns	r2, r3
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	409a      	lsls	r2, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d26:	2201      	movs	r2, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0xea>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d123      	bne.n	8000dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	58d3      	ldr	r3, [r2, r3]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2207      	movs	r2, #7
 8000da4:	4013      	ands	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	43da      	mvns	r2, r3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	691a      	ldr	r2, [r3, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2107      	movs	r1, #7
 8000dbe:	400b      	ands	r3, r1
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	08da      	lsrs	r2, r3, #3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	6939      	ldr	r1, [r7, #16]
 8000dd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2203      	movs	r2, #3
 8000df8:	401a      	ands	r2, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	055b      	lsls	r3, r3, #21
 8000e16:	4013      	ands	r3, r2
 8000e18:	d100      	bne.n	8000e1c <HAL_GPIO_Init+0x174>
 8000e1a:	e09a      	b.n	8000f52 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1c:	4b54      	ldr	r3, [pc, #336]	; (8000f70 <HAL_GPIO_Init+0x2c8>)
 8000e1e:	699a      	ldr	r2, [r3, #24]
 8000e20:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <HAL_GPIO_Init+0x2c8>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	619a      	str	r2, [r3, #24]
 8000e28:	4b51      	ldr	r3, [pc, #324]	; (8000f70 <HAL_GPIO_Init+0x2c8>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e34:	4a4f      	ldr	r2, [pc, #316]	; (8000f74 <HAL_GPIO_Init+0x2cc>)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	589b      	ldr	r3, [r3, r2]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2203      	movs	r2, #3
 8000e46:	4013      	ands	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	2390      	movs	r3, #144	; 0x90
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0x1e2>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a44      	ldr	r2, [pc, #272]	; (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_GPIO_Init+0x1de>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a43      	ldr	r2, [pc, #268]	; (8000f7c <HAL_GPIO_Init+0x2d4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x1da>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a42      	ldr	r2, [pc, #264]	; (8000f80 <HAL_GPIO_Init+0x2d8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_GPIO_Init+0x1d6>
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x1e4>
 8000e7e:	2305      	movs	r3, #5
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x1e4>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x1e4>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x1e4>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	2103      	movs	r1, #3
 8000e90:	400a      	ands	r2, r1
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e9c:	4935      	ldr	r1, [pc, #212]	; (8000f74 <HAL_GPIO_Init+0x2cc>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eaa:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43da      	mvns	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	4013      	ands	r3, r2
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	035b      	lsls	r3, r3, #13
 8000f16:	4013      	ands	r3, r2
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43da      	mvns	r2, r3
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	039b      	lsls	r3, r3, #14
 8000f40:	4013      	ands	r3, r2
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	40da      	lsrs	r2, r3
 8000f60:	1e13      	subs	r3, r2, #0
 8000f62:	d000      	beq.n	8000f66 <HAL_GPIO_Init+0x2be>
 8000f64:	e6a8      	b.n	8000cb8 <HAL_GPIO_Init+0x10>
  } 
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b006      	add	sp, #24
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	48000c00 	.word	0x48000c00
 8000f84:	40010400 	.word	0x40010400

08000f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e082      	b.n	80010a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2241      	movs	r2, #65	; 0x41
 8000f9e:	5c9b      	ldrb	r3, [r3, r2]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2240      	movs	r2, #64	; 0x40
 8000faa:	2100      	movs	r1, #0
 8000fac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff fa81 	bl	80004b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2241      	movs	r2, #65	; 0x41
 8000fba:	2124      	movs	r1, #36	; 0x24
 8000fbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	438a      	bics	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4934      	ldr	r1, [pc, #208]	; (80010a8 <HAL_I2C_Init+0x120>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4931      	ldr	r1, [pc, #196]	; (80010ac <HAL_I2C_Init+0x124>)
 8000fe8:	400a      	ands	r2, r1
 8000fea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d108      	bne.n	8001006 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	0209      	lsls	r1, r1, #8
 8001000:	430a      	orrs	r2, r1
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	e007      	b.n	8001016 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2184      	movs	r1, #132	; 0x84
 8001010:	0209      	lsls	r1, r1, #8
 8001012:	430a      	orrs	r2, r1
 8001014:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d104      	bne.n	8001028 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	491f      	ldr	r1, [pc, #124]	; (80010b0 <HAL_I2C_Init+0x128>)
 8001034:	430a      	orrs	r2, r1
 8001036:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	491a      	ldr	r1, [pc, #104]	; (80010ac <HAL_I2C_Init+0x124>)
 8001044:	400a      	ands	r2, r1
 8001046:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	431a      	orrs	r2, r3
 8001052:	0011      	movs	r1, r2
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	021a      	lsls	r2, r3, #8
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	430a      	orrs	r2, r1
 8001060:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69d9      	ldr	r1, [r3, #28]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1a      	ldr	r2, [r3, #32]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2241      	movs	r2, #65	; 0x41
 800108c:	2120      	movs	r1, #32
 800108e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2242      	movs	r2, #66	; 0x42
 800109a:	2100      	movs	r1, #0
 800109c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	f0ffffff 	.word	0xf0ffffff
 80010ac:	ffff7fff 	.word	0xffff7fff
 80010b0:	02008000 	.word	0x02008000

080010b4 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	000c      	movs	r4, r1
 80010be:	0010      	movs	r0, r2
 80010c0:	0019      	movs	r1, r3
 80010c2:	230a      	movs	r3, #10
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	1c22      	adds	r2, r4, #0
 80010c8:	801a      	strh	r2, [r3, #0]
 80010ca:	2308      	movs	r3, #8
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	1c02      	adds	r2, r0, #0
 80010d0:	801a      	strh	r2, [r3, #0]
 80010d2:	1dbb      	adds	r3, r7, #6
 80010d4:	1c0a      	adds	r2, r1, #0
 80010d6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2241      	movs	r2, #65	; 0x41
 80010dc:	5c9b      	ldrb	r3, [r3, r2]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b20      	cmp	r3, #32
 80010e2:	d000      	beq.n	80010e6 <HAL_I2C_Mem_Write_DMA+0x32>
 80010e4:	e0e7      	b.n	80012b6 <HAL_I2C_Mem_Write_DMA+0x202>
  {
    if ((pData == NULL) || (Size == 0U))
 80010e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <HAL_I2C_Mem_Write_DMA+0x42>
 80010ec:	2334      	movs	r3, #52	; 0x34
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d105      	bne.n	8001102 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e0da      	b.n	80012b8 <HAL_I2C_Mem_Write_DMA+0x204>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	699a      	ldr	r2, [r3, #24]
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	401a      	ands	r2, r3
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	429a      	cmp	r2, r3
 8001114:	d101      	bne.n	800111a <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8001116:	2302      	movs	r3, #2
 8001118:	e0ce      	b.n	80012b8 <HAL_I2C_Mem_Write_DMA+0x204>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2240      	movs	r2, #64	; 0x40
 800111e:	5c9b      	ldrb	r3, [r3, r2]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_I2C_Mem_Write_DMA+0x74>
 8001124:	2302      	movs	r3, #2
 8001126:	e0c7      	b.n	80012b8 <HAL_I2C_Mem_Write_DMA+0x204>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2240      	movs	r2, #64	; 0x40
 800112c:	2101      	movs	r1, #1
 800112e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001130:	f7ff fae8 	bl	8000704 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2241      	movs	r2, #65	; 0x41
 800113c:	2121      	movs	r1, #33	; 0x21
 800113e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2242      	movs	r2, #66	; 0x42
 8001144:	2140      	movs	r1, #64	; 0x40
 8001146:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2234      	movs	r2, #52	; 0x34
 8001158:	18ba      	adds	r2, r7, r2
 800115a:	8812      	ldrh	r2, [r2, #0]
 800115c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4a57      	ldr	r2, [pc, #348]	; (80012c0 <HAL_I2C_Mem_Write_DMA+0x20c>)
 8001162:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4a57      	ldr	r2, [pc, #348]	; (80012c4 <HAL_I2C_Mem_Write_DMA+0x210>)
 8001168:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800116e:	b29b      	uxth	r3, r3
 8001170:	2bff      	cmp	r3, #255	; 0xff
 8001172:	d906      	bls.n	8001182 <HAL_I2C_Mem_Write_DMA+0xce>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	22ff      	movs	r2, #255	; 0xff
 8001178:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	045b      	lsls	r3, r3, #17
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	e007      	b.n	8001192 <HAL_I2C_Mem_Write_DMA+0xde>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001186:	b29a      	uxth	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	049b      	lsls	r3, r3, #18
 8001190:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001192:	1dbb      	adds	r3, r7, #6
 8001194:	881c      	ldrh	r4, [r3, #0]
 8001196:	2308      	movs	r3, #8
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	881a      	ldrh	r2, [r3, #0]
 800119c:	230a      	movs	r3, #10
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	8819      	ldrh	r1, [r3, #0]
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2319      	movs	r3, #25
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	0023      	movs	r3, r4
 80011ae:	f000 fbfd 	bl	80019ac <I2C_RequestMemoryWrite>
 80011b2:	1e03      	subs	r3, r0, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_I2C_Mem_Write_DMA+0x10e>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2240      	movs	r2, #64	; 0x40
 80011ba:	2100      	movs	r1, #0
 80011bc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e07a      	b.n	80012b8 <HAL_I2C_Mem_Write_DMA+0x204>
    }


    if (hi2c->hdmatx != NULL)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d023      	beq.n	8001212 <HAL_I2C_Mem_Write_DMA+0x15e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ce:	4a3e      	ldr	r2, [pc, #248]	; (80012c8 <HAL_I2C_Mem_Write_DMA+0x214>)
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d6:	4a3d      	ldr	r2, [pc, #244]	; (80012cc <HAL_I2C_Mem_Write_DMA+0x218>)
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	2200      	movs	r2, #0
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e6:	2200      	movs	r2, #0
 80011e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3328      	adds	r3, #40	; 0x28
 80011f6:	001a      	movs	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fc:	2517      	movs	r5, #23
 80011fe:	197c      	adds	r4, r7, r5
 8001200:	f7ff fbb0 	bl	8000964 <HAL_DMA_Start_IT>
 8001204:	0003      	movs	r3, r0
 8001206:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8001208:	197b      	adds	r3, r7, r5
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d13e      	bne.n	800128e <HAL_I2C_Mem_Write_DMA+0x1da>
 8001210:	e013      	b.n	800123a <HAL_I2C_Mem_Write_DMA+0x186>
      hi2c->State     = HAL_I2C_STATE_READY;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2241      	movs	r2, #65	; 0x41
 8001216:	2120      	movs	r1, #32
 8001218:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2242      	movs	r2, #66	; 0x42
 800121e:	2100      	movs	r1, #0
 8001220:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	431a      	orrs	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2240      	movs	r2, #64	; 0x40
 8001232:	2100      	movs	r1, #0
 8001234:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e03e      	b.n	80012b8 <HAL_I2C_Mem_Write_DMA+0x204>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123e:	b2da      	uxtb	r2, r3
 8001240:	69fc      	ldr	r4, [r7, #28]
 8001242:	230a      	movs	r3, #10
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	8819      	ldrh	r1, [r3, #0]
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	2300      	movs	r3, #0
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	0023      	movs	r3, r4
 8001250:	f001 fa46 	bl	80026e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001258:	b29a      	uxth	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29a      	uxth	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	2100      	movs	r1, #0
 800126c:	5499      	strb	r1, [r3, r2]

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2110      	movs	r1, #16
 8001272:	0018      	movs	r0, r3
 8001274:	f001 fa6a 	bl	800274c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	01c9      	lsls	r1, r1, #7
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e014      	b.n	80012b8 <HAL_I2C_Mem_Write_DMA+0x204>
      hi2c->State     = HAL_I2C_STATE_READY;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2241      	movs	r2, #65	; 0x41
 8001292:	2120      	movs	r1, #32
 8001294:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2242      	movs	r2, #66	; 0x42
 800129a:	2100      	movs	r1, #0
 800129c:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	2210      	movs	r2, #16
 80012a4:	431a      	orrs	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2240      	movs	r2, #64	; 0x40
 80012ae:	2100      	movs	r1, #0
 80012b0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_I2C_Mem_Write_DMA+0x204>
  }
  else
  {
    return HAL_BUSY;
 80012b6:	2302      	movs	r3, #2
  }
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b008      	add	sp, #32
 80012be:	bdb0      	pop	{r4, r5, r7, pc}
 80012c0:	ffff0000 	.word	0xffff0000
 80012c4:	080015a9 	.word	0x080015a9
 80012c8:	08002409 	.word	0x08002409
 80012cc:	080024a9 	.word	0x080024a9

080012d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	0008      	movs	r0, r1
 800131a:	0011      	movs	r1, r2
 800131c:	1cfb      	adds	r3, r7, #3
 800131e:	1c02      	adds	r2, r0, #0
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	003b      	movs	r3, r7
 8001324:	1c0a      	adds	r2, r1, #0
 8001326:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}

08001380 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	5c9b      	ldrb	r3, [r3, r2]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <I2C_Slave_ISR_IT+0x24>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e0fa      	b.n	800159a <I2C_Slave_ISR_IT+0x21a>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2240      	movs	r2, #64	; 0x40
 80013a8:	2101      	movs	r1, #1
 80013aa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	001a      	movs	r2, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	4013      	ands	r3, r2
 80013b6:	d00b      	beq.n	80013d0 <I2C_Slave_ISR_IT+0x50>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	001a      	movs	r2, r3
 80013be:	2301      	movs	r3, #1
 80013c0:	4013      	ands	r3, r2
 80013c2:	d005      	beq.n	80013d0 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	0011      	movs	r1, r2
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 fd70 	bl	8001eb0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	001a      	movs	r2, r3
 80013d6:	2301      	movs	r3, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	d054      	beq.n	8001486 <I2C_Slave_ISR_IT+0x106>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	001a      	movs	r2, r3
 80013e2:	2301      	movs	r3, #1
 80013e4:	4013      	ands	r3, r2
 80013e6:	d04e      	beq.n	8001486 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d12d      	bne.n	800144e <I2C_Slave_ISR_IT+0xce>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2241      	movs	r2, #65	; 0x41
 80013f6:	5c9b      	ldrb	r3, [r3, r2]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b28      	cmp	r3, #40	; 0x28
 80013fc:	d10b      	bne.n	8001416 <I2C_Slave_ISR_IT+0x96>
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	049b      	lsls	r3, r3, #18
 8001404:	429a      	cmp	r2, r3
 8001406:	d106      	bne.n	8001416 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	0011      	movs	r1, r2
 800140e:	0018      	movs	r0, r3
 8001410:	f000 fe72 	bl	80020f8 <I2C_ITListenCplt>
 8001414:	e036      	b.n	8001484 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2241      	movs	r2, #65	; 0x41
 800141a:	5c9b      	ldrb	r3, [r3, r2]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b29      	cmp	r3, #41	; 0x29
 8001420:	d110      	bne.n	8001444 <I2C_Slave_ISR_IT+0xc4>
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4a5f      	ldr	r2, [pc, #380]	; (80015a4 <I2C_Slave_ISR_IT+0x224>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00c      	beq.n	8001444 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2210      	movs	r2, #16
 8001430:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	0018      	movs	r0, r3
 8001436:	f000 ffc4 	bl	80023c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	0018      	movs	r0, r3
 800143e:	f000 fbff 	bl	8001c40 <I2C_ITSlaveSeqCplt>
 8001442:	e01f      	b.n	8001484 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2210      	movs	r2, #16
 800144a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800144c:	e09d      	b.n	800158a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2210      	movs	r2, #16
 8001454:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	2204      	movs	r2, #4
 800145c:	431a      	orrs	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <I2C_Slave_ISR_IT+0xf4>
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	045b      	lsls	r3, r3, #17
 800146e:	429a      	cmp	r2, r3
 8001470:	d000      	beq.n	8001474 <I2C_Slave_ISR_IT+0xf4>
 8001472:	e08a      	b.n	800158a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	0011      	movs	r1, r2
 800147c:	0018      	movs	r0, r3
 800147e:	f000 fe95 	bl	80021ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001482:	e082      	b.n	800158a <I2C_Slave_ISR_IT+0x20a>
 8001484:	e081      	b.n	800158a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	001a      	movs	r2, r3
 800148c:	2301      	movs	r3, #1
 800148e:	4013      	ands	r3, r2
 8001490:	d031      	beq.n	80014f6 <I2C_Slave_ISR_IT+0x176>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	001a      	movs	r2, r3
 8001498:	2301      	movs	r3, #1
 800149a:	4013      	ands	r3, r2
 800149c:	d02b      	beq.n	80014f6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d018      	beq.n	80014da <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c4:	3b01      	subs	r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d154      	bne.n	800158e <I2C_Slave_ISR_IT+0x20e>
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <I2C_Slave_ISR_IT+0x224>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d050      	beq.n	800158e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 fba6 	bl	8001c40 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80014f4:	e04b      	b.n	800158e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	001a      	movs	r2, r3
 80014fc:	2301      	movs	r3, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	d00c      	beq.n	800151c <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	001a      	movs	r2, r3
 8001508:	2301      	movs	r3, #1
 800150a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800150c:	d006      	beq.n	800151c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	0011      	movs	r1, r2
 8001514:	0018      	movs	r0, r3
 8001516:	f000 faad 	bl	8001a74 <I2C_ITAddrCplt>
 800151a:	e039      	b.n	8001590 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	001a      	movs	r2, r3
 8001522:	2301      	movs	r3, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d033      	beq.n	8001590 <I2C_Slave_ISR_IT+0x210>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	001a      	movs	r2, r3
 800152e:	2301      	movs	r3, #1
 8001530:	4013      	ands	r3, r2
 8001532:	d02d      	beq.n	8001590 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d018      	beq.n	8001570 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001558:	b29b      	uxth	r3, r3
 800155a:	3b01      	subs	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	851a      	strh	r2, [r3, #40]	; 0x28
 800156e:	e00f      	b.n	8001590 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	045b      	lsls	r3, r3, #17
 8001576:	429a      	cmp	r2, r3
 8001578:	d002      	beq.n	8001580 <I2C_Slave_ISR_IT+0x200>
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d107      	bne.n	8001590 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	0018      	movs	r0, r3
 8001584:	f000 fb5c 	bl	8001c40 <I2C_ITSlaveSeqCplt>
 8001588:	e002      	b.n	8001590 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	e000      	b.n	8001590 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800158e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2240      	movs	r2, #64	; 0x40
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b006      	add	sp, #24
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	ffff0000 	.word	0xffff0000

080015a8 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2240      	movs	r2, #64	; 0x40
 80015b8:	5c9b      	ldrb	r3, [r3, r2]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <I2C_Master_ISR_DMA+0x1a>
 80015be:	2302      	movs	r3, #2
 80015c0:	e0f7      	b.n	80017b2 <I2C_Master_ISR_DMA+0x20a>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2240      	movs	r2, #64	; 0x40
 80015c6:	2101      	movs	r1, #1
 80015c8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	001a      	movs	r2, r3
 80015d0:	2301      	movs	r3, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	d019      	beq.n	800160a <I2C_Master_ISR_DMA+0x62>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	001a      	movs	r2, r3
 80015dc:	2301      	movs	r3, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	d013      	beq.n	800160a <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2210      	movs	r2, #16
 80015e8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	2204      	movs	r2, #4
 80015f0:	431a      	orrs	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2120      	movs	r1, #32
 80015fa:	0018      	movs	r0, r3
 80015fc:	f001 f8a6 	bl	800274c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	0018      	movs	r0, r3
 8001604:	f000 fedd 	bl	80023c2 <I2C_Flush_TXDR>
 8001608:	e0ce      	b.n	80017a8 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	09db      	lsrs	r3, r3, #7
 800160e:	001a      	movs	r2, r3
 8001610:	2301      	movs	r3, #1
 8001612:	4013      	ands	r3, r2
 8001614:	d100      	bne.n	8001618 <I2C_Master_ISR_DMA+0x70>
 8001616:	e07e      	b.n	8001716 <I2C_Master_ISR_DMA+0x16e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	099b      	lsrs	r3, r3, #6
 800161c:	001a      	movs	r2, r3
 800161e:	2301      	movs	r3, #1
 8001620:	4013      	ands	r3, r2
 8001622:	d100      	bne.n	8001626 <I2C_Master_ISR_DMA+0x7e>
 8001624:	e077      	b.n	8001716 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2140      	movs	r1, #64	; 0x40
 8001632:	438a      	bics	r2, r1
 8001634:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163a:	b29b      	uxth	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d055      	beq.n	80016ec <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	b29a      	uxth	r2, r3
 8001648:	2312      	movs	r3, #18
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	0592      	lsls	r2, r2, #22
 800164e:	0d92      	lsrs	r2, r2, #22
 8001650:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001656:	b29b      	uxth	r3, r3
 8001658:	2bff      	cmp	r3, #255	; 0xff
 800165a:	d906      	bls.n	800166a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	045b      	lsls	r3, r3, #17
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e010      	b.n	800168c <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	4a50      	ldr	r2, [pc, #320]	; (80017bc <I2C_Master_ISR_DMA+0x214>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d003      	beq.n	8001686 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e002      	b.n	800168c <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	049b      	lsls	r3, r3, #18
 800168a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001690:	b2da      	uxtb	r2, r3
 8001692:	697c      	ldr	r4, [r7, #20]
 8001694:	2312      	movs	r3, #18
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	8819      	ldrh	r1, [r3, #0]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	2300      	movs	r3, #0
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	0023      	movs	r3, r4
 80016a2:	f001 f81d 	bl	80026e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2241      	movs	r2, #65	; 0x41
 80016bc:	5c9b      	ldrb	r3, [r3, r2]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b22      	cmp	r3, #34	; 0x22
 80016c2:	d109      	bne.n	80016d8 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	0209      	lsls	r1, r1, #8
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80016d6:	e067      	b.n	80017a8 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	01c9      	lsls	r1, r1, #7
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80016ea:	e05d      	b.n	80017a8 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	049b      	lsls	r3, r3, #18
 80016f6:	401a      	ands	r2, r3
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	049b      	lsls	r3, r3, #18
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d004      	beq.n	800170a <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	0018      	movs	r0, r3
 8001704:	f000 fa5a 	bl	8001bbc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001708:	e04e      	b.n	80017a8 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	0018      	movs	r0, r3
 8001710:	f000 fd4c 	bl	80021ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001714:	e048      	b.n	80017a8 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	001a      	movs	r2, r3
 800171c:	2301      	movs	r3, #1
 800171e:	4013      	ands	r3, r2
 8001720:	d02e      	beq.n	8001780 <I2C_Master_ISR_DMA+0x1d8>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	001a      	movs	r2, r3
 8001728:	2301      	movs	r3, #1
 800172a:	4013      	ands	r3, r2
 800172c:	d028      	beq.n	8001780 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d11d      	bne.n	8001774 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	049b      	lsls	r3, r3, #18
 8001742:	401a      	ands	r2, r3
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	049b      	lsls	r3, r3, #18
 8001748:	429a      	cmp	r2, r3
 800174a:	d02c      	beq.n	80017a6 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <I2C_Master_ISR_DMA+0x214>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d109      	bne.n	800176a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	01c9      	lsls	r1, r1, #7
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001768:	e01d      	b.n	80017a6 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	0018      	movs	r0, r3
 800176e:	f000 fa25 	bl	8001bbc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001772:	e018      	b.n	80017a6 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	0018      	movs	r0, r3
 800177a:	f000 fd17 	bl	80021ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800177e:	e012      	b.n	80017a6 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	001a      	movs	r2, r3
 8001786:	2301      	movs	r3, #1
 8001788:	4013      	ands	r3, r2
 800178a:	d00d      	beq.n	80017a8 <I2C_Master_ISR_DMA+0x200>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	001a      	movs	r2, r3
 8001792:	2301      	movs	r3, #1
 8001794:	4013      	ands	r3, r2
 8001796:	d007      	beq.n	80017a8 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	0011      	movs	r1, r2
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 fab4 	bl	8001d0c <I2C_ITMasterCplt>
 80017a4:	e000      	b.n	80017a8 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80017a6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b007      	add	sp, #28
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	ffff0000 	.word	0xffff0000

080017c0 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2240      	movs	r2, #64	; 0x40
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <I2C_Slave_ISR_DMA+0x24>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e0dd      	b.n	80019a0 <I2C_Slave_ISR_DMA+0x1e0>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2240      	movs	r2, #64	; 0x40
 80017e8:	2101      	movs	r1, #1
 80017ea:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	001a      	movs	r2, r3
 80017f2:	2301      	movs	r3, #1
 80017f4:	4013      	ands	r3, r2
 80017f6:	d00b      	beq.n	8001810 <I2C_Slave_ISR_DMA+0x50>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	001a      	movs	r2, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	4013      	ands	r3, r2
 8001802:	d005      	beq.n	8001810 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	0011      	movs	r1, r2
 800180a:	0018      	movs	r0, r3
 800180c:	f000 fb50 	bl	8001eb0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	001a      	movs	r2, r3
 8001816:	2301      	movs	r3, #1
 8001818:	4013      	ands	r3, r2
 800181a:	d100      	bne.n	800181e <I2C_Slave_ISR_DMA+0x5e>
 800181c:	e0a9      	b.n	8001972 <I2C_Slave_ISR_DMA+0x1b2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	001a      	movs	r2, r3
 8001824:	2301      	movs	r3, #1
 8001826:	4013      	ands	r3, r2
 8001828:	d100      	bne.n	800182c <I2C_Slave_ISR_DMA+0x6c>
 800182a:	e0a2      	b.n	8001972 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	0b9b      	lsrs	r3, r3, #14
 8001830:	001a      	movs	r2, r3
 8001832:	2301      	movs	r3, #1
 8001834:	4013      	ands	r3, r2
 8001836:	d106      	bne.n	8001846 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0bdb      	lsrs	r3, r3, #15
 800183c:	001a      	movs	r2, r3
 800183e:	2301      	movs	r3, #1
 8001840:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001842:	d100      	bne.n	8001846 <I2C_Slave_ISR_DMA+0x86>
 8001844:	e08e      	b.n	8001964 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00d      	beq.n	800186a <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	0bdb      	lsrs	r3, r3, #15
 8001852:	001a      	movs	r2, r3
 8001854:	2301      	movs	r3, #1
 8001856:	4013      	ands	r3, r2
 8001858:	d007      	beq.n	800186a <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8001866:	2301      	movs	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00d      	beq.n	800188e <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0b9b      	lsrs	r3, r3, #14
 8001876:	001a      	movs	r2, r3
 8001878:	2301      	movs	r3, #1
 800187a:	4013      	ands	r3, r2
 800187c:	d007      	beq.n	800188e <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 800188a:	2301      	movs	r3, #1
 800188c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d12d      	bne.n	80018f0 <I2C_Slave_ISR_DMA+0x130>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2241      	movs	r2, #65	; 0x41
 8001898:	5c9b      	ldrb	r3, [r3, r2]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b28      	cmp	r3, #40	; 0x28
 800189e:	d10b      	bne.n	80018b8 <I2C_Slave_ISR_DMA+0xf8>
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	049b      	lsls	r3, r3, #18
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d106      	bne.n	80018b8 <I2C_Slave_ISR_DMA+0xf8>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 fc21 	bl	80020f8 <I2C_ITListenCplt>
 80018b6:	e054      	b.n	8001962 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2241      	movs	r2, #65	; 0x41
 80018bc:	5c9b      	ldrb	r3, [r3, r2]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b29      	cmp	r3, #41	; 0x29
 80018c2:	d110      	bne.n	80018e6 <I2C_Slave_ISR_DMA+0x126>
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	4a38      	ldr	r2, [pc, #224]	; (80019a8 <I2C_Slave_ISR_DMA+0x1e8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00c      	beq.n	80018e6 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2210      	movs	r2, #16
 80018d2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 fd73 	bl	80023c2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	0018      	movs	r0, r3
 80018e0:	f000 f9ae 	bl	8001c40 <I2C_ITSlaveSeqCplt>
 80018e4:	e03d      	b.n	8001962 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2210      	movs	r2, #16
 80018ec:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80018ee:	e03e      	b.n	800196e <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2210      	movs	r2, #16
 80018f6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	2204      	movs	r2, #4
 80018fe:	431a      	orrs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001904:	2317      	movs	r3, #23
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	2141      	movs	r1, #65	; 0x41
 800190c:	5c52      	ldrb	r2, [r2, r1]
 800190e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <I2C_Slave_ISR_DMA+0x160>
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	045b      	lsls	r3, r3, #17
 800191c:	429a      	cmp	r2, r3
 800191e:	d126      	bne.n	800196e <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001920:	2217      	movs	r2, #23
 8001922:	18bb      	adds	r3, r7, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b21      	cmp	r3, #33	; 0x21
 8001928:	d003      	beq.n	8001932 <I2C_Slave_ISR_DMA+0x172>
 800192a:	18bb      	adds	r3, r7, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b29      	cmp	r3, #41	; 0x29
 8001930:	d103      	bne.n	800193a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2221      	movs	r2, #33	; 0x21
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
 8001938:	e00b      	b.n	8001952 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800193a:	2217      	movs	r2, #23
 800193c:	18bb      	adds	r3, r7, r2
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b22      	cmp	r3, #34	; 0x22
 8001942:	d003      	beq.n	800194c <I2C_Slave_ISR_DMA+0x18c>
 8001944:	18bb      	adds	r3, r7, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b2a      	cmp	r3, #42	; 0x2a
 800194a:	d102      	bne.n	8001952 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2222      	movs	r2, #34	; 0x22
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	0011      	movs	r1, r2
 800195a:	0018      	movs	r0, r3
 800195c:	f000 fc26 	bl	80021ac <I2C_ITError>
      if (treatdmanack == 1U)
 8001960:	e005      	b.n	800196e <I2C_Slave_ISR_DMA+0x1ae>
 8001962:	e004      	b.n	800196e <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2210      	movs	r2, #16
 800196a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800196c:	e013      	b.n	8001996 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 800196e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001970:	e011      	b.n	8001996 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	001a      	movs	r2, r3
 8001978:	2301      	movs	r3, #1
 800197a:	4013      	ands	r3, r2
 800197c:	d00b      	beq.n	8001996 <I2C_Slave_ISR_DMA+0x1d6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	08db      	lsrs	r3, r3, #3
 8001982:	001a      	movs	r2, r3
 8001984:	2301      	movs	r3, #1
 8001986:	4013      	ands	r3, r2
 8001988:	d005      	beq.n	8001996 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	0011      	movs	r1, r2
 8001990:	0018      	movs	r0, r3
 8001992:	f000 f86f 	bl	8001a74 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2240      	movs	r2, #64	; 0x40
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b008      	add	sp, #32
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	ffff0000 	.word	0xffff0000

080019ac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	000c      	movs	r4, r1
 80019b6:	0010      	movs	r0, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	250a      	movs	r5, #10
 80019bc:	197b      	adds	r3, r7, r5
 80019be:	1c22      	adds	r2, r4, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	2308      	movs	r3, #8
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	1c02      	adds	r2, r0, #0
 80019c8:	801a      	strh	r2, [r3, #0]
 80019ca:	1dbb      	adds	r3, r7, #6
 80019cc:	1c0a      	adds	r2, r1, #0
 80019ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019d0:	1dbb      	adds	r3, r7, #6
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	045c      	lsls	r4, r3, #17
 80019da:	197b      	adds	r3, r7, r5
 80019dc:	8819      	ldrh	r1, [r3, #0]
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <I2C_RequestMemoryWrite+0xc4>)
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	0023      	movs	r3, r4
 80019e6:	f000 fe7b 	bl	80026e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f000 fdd0 	bl	8002596 <I2C_WaitOnTXISFlagUntilTimeout>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d001      	beq.n	80019fe <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e033      	b.n	8001a66 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019fe:	1dbb      	adds	r3, r7, #6
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a06:	2308      	movs	r3, #8
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
 8001a14:	e019      	b.n	8001a4a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a16:	2308      	movs	r3, #8
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	6a39      	ldr	r1, [r7, #32]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 fdb1 	bl	8002596 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a34:	1e03      	subs	r3, r0, #0
 8001a36:	d001      	beq.n	8001a3c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e014      	b.n	8001a66 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a4a:	6a3a      	ldr	r2, [r7, #32]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	0013      	movs	r3, r2
 8001a54:	2200      	movs	r2, #0
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	f000 fd5e 	bl	8002518 <I2C_WaitOnFlagUntilTimeout>
 8001a5c:	1e03      	subs	r3, r0, #0
 8001a5e:	d001      	beq.n	8001a64 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b004      	add	sp, #16
 8001a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	80002000 	.word	0x80002000

08001a74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a74:	b5b0      	push	{r4, r5, r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2241      	movs	r2, #65	; 0x41
 8001a82:	5c9b      	ldrb	r3, [r3, r2]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	001a      	movs	r2, r3
 8001a88:	2328      	movs	r3, #40	; 0x28
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b28      	cmp	r3, #40	; 0x28
 8001a8e:	d000      	beq.n	8001a92 <I2C_ITAddrCplt+0x1e>
 8001a90:	e088      	b.n	8001ba4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	250f      	movs	r5, #15
 8001a9e:	197b      	adds	r3, r7, r5
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	200c      	movs	r0, #12
 8001ab2:	183b      	adds	r3, r7, r0
 8001ab4:	21fe      	movs	r1, #254	; 0xfe
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	240a      	movs	r4, #10
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	0592      	lsls	r2, r2, #22
 8001ac8:	0d92      	lsrs	r2, r2, #22
 8001aca:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	21fe      	movs	r1, #254	; 0xfe
 8001ada:	400a      	ands	r2, r1
 8001adc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d148      	bne.n	8001b78 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001ae6:	0021      	movs	r1, r4
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	09db      	lsrs	r3, r3, #7
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	183b      	adds	r3, r7, r0
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	4053      	eors	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	001a      	movs	r2, r3
 8001afa:	2306      	movs	r3, #6
 8001afc:	4013      	ands	r3, r2
 8001afe:	d120      	bne.n	8001b42 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	187a      	adds	r2, r7, r1
 8001b04:	8812      	ldrh	r2, [r2, #0]
 8001b06:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d14c      	bne.n	8001bb4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2208      	movs	r2, #8
 8001b26:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2240      	movs	r2, #64	; 0x40
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b30:	183b      	adds	r3, r7, r0
 8001b32:	881a      	ldrh	r2, [r3, #0]
 8001b34:	197b      	adds	r3, r7, r5
 8001b36:	7819      	ldrb	r1, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7ff fbe8 	bl	8001310 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001b40:	e038      	b.n	8001bb4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001b42:	240c      	movs	r4, #12
 8001b44:	193b      	adds	r3, r7, r4
 8001b46:	2208      	movs	r2, #8
 8001b48:	18ba      	adds	r2, r7, r2
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	021a      	lsls	r2, r3, #8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	0011      	movs	r1, r2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fe60 	bl	800281c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	2100      	movs	r1, #0
 8001b62:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b64:	193b      	adds	r3, r7, r4
 8001b66:	881a      	ldrh	r2, [r3, #0]
 8001b68:	230f      	movs	r3, #15
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	7819      	ldrb	r1, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff fbcd 	bl	8001310 <HAL_I2C_AddrCallback>
}
 8001b76:	e01d      	b.n	8001bb4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	021a      	lsls	r2, r3, #8
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	0011      	movs	r1, r2
 8001b80:	0018      	movs	r0, r3
 8001b82:	f000 fe4b 	bl	800281c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2240      	movs	r2, #64	; 0x40
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b8e:	230c      	movs	r3, #12
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	881a      	ldrh	r2, [r3, #0]
 8001b94:	230f      	movs	r3, #15
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	7819      	ldrb	r1, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff fbb7 	bl	8001310 <HAL_I2C_AddrCallback>
}
 8001ba2:	e007      	b.n	8001bb4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	5499      	strb	r1, [r3, r2]
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b004      	add	sp, #16
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}

08001bbc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2242      	movs	r2, #66	; 0x42
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2241      	movs	r2, #65	; 0x41
 8001bd0:	5c9b      	ldrb	r3, [r3, r2]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b21      	cmp	r3, #33	; 0x21
 8001bd6:	d117      	bne.n	8001c08 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2241      	movs	r2, #65	; 0x41
 8001bdc:	2120      	movs	r1, #32
 8001bde:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2211      	movs	r2, #17
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 fe13 	bl	800281c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2240      	movs	r2, #64	; 0x40
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7ff fb65 	bl	80012d0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001c06:	e016      	b.n	8001c36 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2241      	movs	r2, #65	; 0x41
 8001c0c:	2120      	movs	r1, #32
 8001c0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2212      	movs	r2, #18
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2102      	movs	r1, #2
 8001c20:	0018      	movs	r0, r3
 8001c22:	f000 fdfb 	bl	800281c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2240      	movs	r2, #64	; 0x40
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7ff fb55 	bl	80012e0 <HAL_I2C_MasterRxCpltCallback>
}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b002      	add	sp, #8
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2242      	movs	r2, #66	; 0x42
 8001c54:	2100      	movs	r1, #0
 8001c56:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	0b9b      	lsrs	r3, r3, #14
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4013      	ands	r3, r2
 8001c62:	d008      	beq.n	8001c76 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4925      	ldr	r1, [pc, #148]	; (8001d04 <I2C_ITSlaveSeqCplt+0xc4>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e00d      	b.n	8001c92 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	0bdb      	lsrs	r3, r3, #15
 8001c7a:	001a      	movs	r2, r3
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d007      	beq.n	8001c92 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	491e      	ldr	r1, [pc, #120]	; (8001d08 <I2C_ITSlaveSeqCplt+0xc8>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2241      	movs	r2, #65	; 0x41
 8001c96:	5c9b      	ldrb	r3, [r3, r2]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b29      	cmp	r3, #41	; 0x29
 8001c9c:	d114      	bne.n	8001cc8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2241      	movs	r2, #65	; 0x41
 8001ca2:	2128      	movs	r1, #40	; 0x28
 8001ca4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2221      	movs	r2, #33	; 0x21
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2101      	movs	r1, #1
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f000 fdb3 	bl	800281c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2240      	movs	r2, #64	; 0x40
 8001cba:	2100      	movs	r1, #0
 8001cbc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff fb15 	bl	80012f0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001cc6:	e019      	b.n	8001cfc <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2241      	movs	r2, #65	; 0x41
 8001ccc:	5c9b      	ldrb	r3, [r3, r2]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8001cd2:	d113      	bne.n	8001cfc <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2241      	movs	r2, #65	; 0x41
 8001cd8:	2128      	movs	r1, #40	; 0x28
 8001cda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2222      	movs	r2, #34	; 0x22
 8001ce0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 fd98 	bl	800281c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7ff fb02 	bl	8001300 <HAL_I2C_SlaveRxCpltCallback>
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b004      	add	sp, #16
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	ffffbfff 	.word	0xffffbfff
 8001d08:	ffff7fff 	.word	0xffff7fff

08001d0c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2241      	movs	r2, #65	; 0x41
 8001d26:	5c9b      	ldrb	r3, [r3, r2]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b21      	cmp	r3, #33	; 0x21
 8001d2c:	d108      	bne.n	8001d40 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2101      	movs	r1, #1
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 fd72 	bl	800281c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2211      	movs	r2, #17
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3e:	e00d      	b.n	8001d5c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2241      	movs	r2, #65	; 0x41
 8001d44:	5c9b      	ldrb	r3, [r3, r2]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b22      	cmp	r3, #34	; 0x22
 8001d4a:	d107      	bne.n	8001d5c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2102      	movs	r1, #2
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 fd63 	bl	800281c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2212      	movs	r2, #18
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4950      	ldr	r1, [pc, #320]	; (8001ea8 <I2C_ITMasterCplt+0x19c>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4d      	ldr	r2, [pc, #308]	; (8001eac <I2C_ITMasterCplt+0x1a0>)
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	2301      	movs	r3, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	d009      	beq.n	8001d98 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2210      	movs	r2, #16
 8001d8a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	2204      	movs	r2, #4
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2241      	movs	r2, #65	; 0x41
 8001d9c:	5c9b      	ldrb	r3, [r3, r2]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b60      	cmp	r3, #96	; 0x60
 8001da2:	d10b      	bne.n	8001dbc <I2C_ITMasterCplt+0xb0>
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	001a      	movs	r2, r3
 8001daa:	2301      	movs	r3, #1
 8001dac:	4013      	ands	r3, r2
 8001dae:	d005      	beq.n	8001dbc <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001dba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 faff 	bl	80023c2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2241      	movs	r2, #65	; 0x41
 8001dce:	5c9b      	ldrb	r3, [r3, r2]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b60      	cmp	r3, #96	; 0x60
 8001dd4:	d002      	beq.n	8001ddc <I2C_ITMasterCplt+0xd0>
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0011      	movs	r1, r2
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f9e1 	bl	80021ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001dea:	e058      	b.n	8001e9e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2241      	movs	r2, #65	; 0x41
 8001df0:	5c9b      	ldrb	r3, [r3, r2]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b21      	cmp	r3, #33	; 0x21
 8001df6:	d126      	bne.n	8001e46 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2241      	movs	r2, #65	; 0x41
 8001dfc:	2120      	movs	r1, #32
 8001dfe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2242      	movs	r2, #66	; 0x42
 8001e0a:	5c9b      	ldrb	r3, [r3, r2]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b40      	cmp	r3, #64	; 0x40
 8001e10:	d10c      	bne.n	8001e2c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2242      	movs	r2, #66	; 0x42
 8001e16:	2100      	movs	r1, #0
 8001e18:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2240      	movs	r2, #64	; 0x40
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff fa8b 	bl	8001340 <HAL_I2C_MemTxCpltCallback>
}
 8001e2a:	e038      	b.n	8001e9e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2242      	movs	r2, #66	; 0x42
 8001e30:	2100      	movs	r1, #0
 8001e32:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	2100      	movs	r1, #0
 8001e3a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f7ff fa46 	bl	80012d0 <HAL_I2C_MasterTxCpltCallback>
}
 8001e44:	e02b      	b.n	8001e9e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2241      	movs	r2, #65	; 0x41
 8001e4a:	5c9b      	ldrb	r3, [r3, r2]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b22      	cmp	r3, #34	; 0x22
 8001e50:	d125      	bne.n	8001e9e <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2241      	movs	r2, #65	; 0x41
 8001e56:	2120      	movs	r1, #32
 8001e58:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2242      	movs	r2, #66	; 0x42
 8001e64:	5c9b      	ldrb	r3, [r3, r2]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d10c      	bne.n	8001e86 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2242      	movs	r2, #66	; 0x42
 8001e70:	2100      	movs	r1, #0
 8001e72:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	2100      	movs	r1, #0
 8001e7a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff fa66 	bl	8001350 <HAL_I2C_MemRxCpltCallback>
}
 8001e84:	e00b      	b.n	8001e9e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2242      	movs	r2, #66	; 0x42
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	2100      	movs	r1, #0
 8001e94:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff fa21 	bl	80012e0 <HAL_I2C_MasterRxCpltCallback>
}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b006      	add	sp, #24
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	fe00e800 	.word	0xfe00e800
 8001eac:	ffff0000 	.word	0xffff0000

08001eb0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001ec6:	200f      	movs	r0, #15
 8001ec8:	183b      	adds	r3, r7, r0
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	2141      	movs	r1, #65	; 0x41
 8001ece:	5c52      	ldrb	r2, [r2, r1]
 8001ed0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001eda:	183b      	adds	r3, r7, r0
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b21      	cmp	r3, #33	; 0x21
 8001ee0:	d003      	beq.n	8001eea <I2C_ITSlaveCplt+0x3a>
 8001ee2:	183b      	adds	r3, r7, r0
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b29      	cmp	r3, #41	; 0x29
 8001ee8:	d109      	bne.n	8001efe <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001eea:	4a7d      	ldr	r2, [pc, #500]	; (80020e0 <I2C_ITSlaveCplt+0x230>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	0011      	movs	r1, r2
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f000 fc93 	bl	800281c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2221      	movs	r2, #33	; 0x21
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
 8001efc:	e011      	b.n	8001f22 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001efe:	220f      	movs	r2, #15
 8001f00:	18bb      	adds	r3, r7, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b22      	cmp	r3, #34	; 0x22
 8001f06:	d003      	beq.n	8001f10 <I2C_ITSlaveCplt+0x60>
 8001f08:	18bb      	adds	r3, r7, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f0e:	d108      	bne.n	8001f22 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001f10:	4a74      	ldr	r2, [pc, #464]	; (80020e4 <I2C_ITSlaveCplt+0x234>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	0011      	movs	r1, r2
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 fc80 	bl	800281c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2222      	movs	r2, #34	; 0x22
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	0209      	lsls	r1, r1, #8
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	496a      	ldr	r1, [pc, #424]	; (80020e8 <I2C_ITSlaveCplt+0x238>)
 8001f40:	400a      	ands	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fa3b 	bl	80023c2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	0b9b      	lsrs	r3, r3, #14
 8001f50:	001a      	movs	r2, r3
 8001f52:	2301      	movs	r3, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	d013      	beq.n	8001f80 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4962      	ldr	r1, [pc, #392]	; (80020ec <I2C_ITSlaveCplt+0x23c>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f7e:	e018      	b.n	8001fb2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	0bdb      	lsrs	r3, r3, #15
 8001f84:	001a      	movs	r2, r3
 8001f86:	2301      	movs	r3, #1
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d012      	beq.n	8001fb2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4956      	ldr	r1, [pc, #344]	; (80020f0 <I2C_ITSlaveCplt+0x240>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	001a      	movs	r2, r3
 8001fb8:	2301      	movs	r3, #1
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d020      	beq.n	8002000 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	2204      	movs	r2, #4
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2242      	movs	r2, #66	; 0x42
 800201a:	2100      	movs	r1, #0
 800201c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	0011      	movs	r1, r2
 8002034:	0018      	movs	r0, r3
 8002036:	f000 f8b9 	bl	80021ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2241      	movs	r2, #65	; 0x41
 800203e:	5c9b      	ldrb	r3, [r3, r2]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b28      	cmp	r3, #40	; 0x28
 8002044:	d147      	bne.n	80020d6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	0011      	movs	r1, r2
 800204c:	0018      	movs	r0, r3
 800204e:	f000 f853 	bl	80020f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002052:	e040      	b.n	80020d6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <I2C_ITSlaveCplt+0x244>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d016      	beq.n	800208c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0018      	movs	r0, r3
 8002062:	f7ff fded 	bl	8001c40 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a22      	ldr	r2, [pc, #136]	; (80020f4 <I2C_ITSlaveCplt+0x244>)
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2241      	movs	r2, #65	; 0x41
 8002070:	2120      	movs	r1, #32
 8002072:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2240      	movs	r2, #64	; 0x40
 800207e:	2100      	movs	r1, #0
 8002080:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff f953 	bl	8001330 <HAL_I2C_ListenCpltCallback>
}
 800208a:	e024      	b.n	80020d6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2241      	movs	r2, #65	; 0x41
 8002090:	5c9b      	ldrb	r3, [r3, r2]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b22      	cmp	r3, #34	; 0x22
 8002096:	d10f      	bne.n	80020b8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2241      	movs	r2, #65	; 0x41
 800209c:	2120      	movs	r1, #32
 800209e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	2100      	movs	r1, #0
 80020ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff f925 	bl	8001300 <HAL_I2C_SlaveRxCpltCallback>
}
 80020b6:	e00e      	b.n	80020d6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2241      	movs	r2, #65	; 0x41
 80020bc:	2120      	movs	r1, #32
 80020be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2240      	movs	r2, #64	; 0x40
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff f90d 	bl	80012f0 <HAL_I2C_SlaveTxCpltCallback>
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b006      	add	sp, #24
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	00008001 	.word	0x00008001
 80020e4:	00008002 	.word	0x00008002
 80020e8:	fe00e800 	.word	0xfe00e800
 80020ec:	ffffbfff 	.word	0xffffbfff
 80020f0:	ffff7fff 	.word	0xffff7fff
 80020f4:	ffff0000 	.word	0xffff0000

080020f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <I2C_ITListenCplt+0xac>)
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2241      	movs	r2, #65	; 0x41
 8002112:	2120      	movs	r1, #32
 8002114:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2242      	movs	r2, #66	; 0x42
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	001a      	movs	r2, r3
 800212a:	2301      	movs	r3, #1
 800212c:	4013      	ands	r3, r2
 800212e:	d022      	beq.n	8002176 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	d012      	beq.n	8002176 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	2204      	movs	r2, #4
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002176:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <I2C_ITListenCplt+0xb0>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	0011      	movs	r1, r2
 800217c:	0018      	movs	r0, r3
 800217e:	f000 fb4d 	bl	800281c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2210      	movs	r2, #16
 8002188:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	2100      	movs	r1, #0
 8002190:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff f8cb 	bl	8001330 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	ffff0000 	.word	0xffff0000
 80021a8:	00008003 	.word	0x00008003

080021ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80021b6:	200f      	movs	r0, #15
 80021b8:	183b      	adds	r3, r7, r0
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	2141      	movs	r1, #65	; 0x41
 80021be:	5c52      	ldrb	r2, [r2, r1]
 80021c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2242      	movs	r2, #66	; 0x42
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a62      	ldr	r2, [pc, #392]	; (8002358 <I2C_ITError+0x1ac>)
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80021e2:	183b      	adds	r3, r7, r0
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b28      	cmp	r3, #40	; 0x28
 80021e8:	d007      	beq.n	80021fa <I2C_ITError+0x4e>
 80021ea:	183b      	adds	r3, r7, r0
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b29      	cmp	r3, #41	; 0x29
 80021f0:	d003      	beq.n	80021fa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80021f2:	183b      	adds	r3, r7, r0
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b2a      	cmp	r3, #42	; 0x2a
 80021f8:	d10c      	bne.n	8002214 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2103      	movs	r1, #3
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 fb0c 	bl	800281c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2241      	movs	r2, #65	; 0x41
 8002208:	2128      	movs	r1, #40	; 0x28
 800220a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a53      	ldr	r2, [pc, #332]	; (800235c <I2C_ITError+0x1b0>)
 8002210:	635a      	str	r2, [r3, #52]	; 0x34
 8002212:	e012      	b.n	800223a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <I2C_ITError+0x1b4>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0011      	movs	r1, r2
 800221a:	0018      	movs	r0, r3
 800221c:	f000 fafe 	bl	800281c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2241      	movs	r2, #65	; 0x41
 8002224:	5c9b      	ldrb	r3, [r3, r2]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b60      	cmp	r3, #96	; 0x60
 800222a:	d003      	beq.n	8002234 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2241      	movs	r2, #65	; 0x41
 8002230:	2120      	movs	r1, #32
 8002232:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002244:	2b00      	cmp	r3, #0
 8002246:	d03b      	beq.n	80022c0 <I2C_ITError+0x114>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b11      	cmp	r3, #17
 800224c:	d002      	beq.n	8002254 <I2C_ITError+0xa8>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b21      	cmp	r3, #33	; 0x21
 8002252:	d135      	bne.n	80022c0 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	01db      	lsls	r3, r3, #7
 800225e:	401a      	ands	r2, r3
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	01db      	lsls	r3, r3, #7
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	493c      	ldr	r1, [pc, #240]	; (8002364 <I2C_ITError+0x1b8>)
 8002274:	400a      	ands	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	0018      	movs	r0, r3
 800227e:	f7fe fcbe 	bl	8000bfe <HAL_DMA_GetState>
 8002282:	0003      	movs	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d016      	beq.n	80022b6 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228c:	4a36      	ldr	r2, [pc, #216]	; (8002368 <I2C_ITError+0x1bc>)
 800228e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	2100      	movs	r1, #0
 8002296:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	0018      	movs	r0, r3
 800229e:	f7fe fbc7 	bl	8000a30 <HAL_DMA_Abort_IT>
 80022a2:	1e03      	subs	r3, r0, #0
 80022a4:	d051      	beq.n	800234a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b0:	0018      	movs	r0, r3
 80022b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022b4:	e049      	b.n	800234a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 f859 	bl	8002370 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022be:	e044      	b.n	800234a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d03b      	beq.n	8002340 <I2C_ITError+0x194>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b12      	cmp	r3, #18
 80022cc:	d002      	beq.n	80022d4 <I2C_ITError+0x128>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b22      	cmp	r3, #34	; 0x22
 80022d2:	d135      	bne.n	8002340 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	401a      	ands	r2, r3
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	491e      	ldr	r1, [pc, #120]	; (800236c <I2C_ITError+0x1c0>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7fe fc7e 	bl	8000bfe <HAL_DMA_GetState>
 8002302:	0003      	movs	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d016      	beq.n	8002336 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230c:	4a16      	ldr	r2, [pc, #88]	; (8002368 <I2C_ITError+0x1bc>)
 800230e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2240      	movs	r2, #64	; 0x40
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	0018      	movs	r0, r3
 800231e:	f7fe fb87 	bl	8000a30 <HAL_DMA_Abort_IT>
 8002322:	1e03      	subs	r3, r0, #0
 8002324:	d013      	beq.n	800234e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	0018      	movs	r0, r3
 8002332:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002334:	e00b      	b.n	800234e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 f819 	bl	8002370 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800233e:	e006      	b.n	800234e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	0018      	movs	r0, r3
 8002344:	f000 f814 	bl	8002370 <I2C_TreatErrorCallback>
  }
}
 8002348:	e002      	b.n	8002350 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	e000      	b.n	8002350 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800234e:	46c0      	nop			; (mov r8, r8)
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b004      	add	sp, #16
 8002356:	bd80      	pop	{r7, pc}
 8002358:	ffff0000 	.word	0xffff0000
 800235c:	08001381 	.word	0x08001381
 8002360:	00008003 	.word	0x00008003
 8002364:	ffffbfff 	.word	0xffffbfff
 8002368:	080024db 	.word	0x080024db
 800236c:	ffff7fff 	.word	0xffff7fff

08002370 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2241      	movs	r2, #65	; 0x41
 800237c:	5c9b      	ldrb	r3, [r3, r2]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b60      	cmp	r3, #96	; 0x60
 8002382:	d10f      	bne.n	80023a4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2241      	movs	r2, #65	; 0x41
 8002388:	2120      	movs	r1, #32
 800238a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2240      	movs	r2, #64	; 0x40
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f7fe ffe7 	bl	8001370 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023a2:	e00a      	b.n	80023ba <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2240      	movs	r2, #64	; 0x40
 80023ae:	2100      	movs	r1, #0
 80023b0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7fe ffd3 	bl	8001360 <HAL_I2C_ErrorCallback>
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b002      	add	sp, #8
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d103      	bne.n	80023e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2201      	movs	r2, #1
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d007      	beq.n	80023fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	619a      	str	r2, [r3, #24]
  }
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4920      	ldr	r1, [pc, #128]	; (80024a4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8002422:	400a      	ands	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2120      	movs	r1, #32
 8002434:	0018      	movs	r0, r3
 8002436:	f000 f989 	bl	800274c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800243a:	e02e      	b.n	800249a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002444:	189a      	adds	r2, r3, r2
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	2bff      	cmp	r3, #255	; 0xff
 8002452:	d903      	bls.n	800245c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	22ff      	movs	r2, #255	; 0xff
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28
 800245a:	e004      	b.n	8002466 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	0019      	movs	r1, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3328      	adds	r3, #40	; 0x28
 8002476:	001a      	movs	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	f7fe fa72 	bl	8000964 <HAL_DMA_Start_IT>
 8002480:	1e03      	subs	r3, r0, #0
 8002482:	d005      	beq.n	8002490 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2110      	movs	r1, #16
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff fe8f 	bl	80021ac <I2C_ITError>
}
 800248e:	e004      	b.n	800249a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2140      	movs	r1, #64	; 0x40
 8002494:	0018      	movs	r0, r3
 8002496:	f000 f959 	bl	800274c <I2C_Enable_IRQ>
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	ffffbfff 	.word	0xffffbfff

080024a8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0209      	lsls	r1, r1, #8
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2110      	movs	r1, #16
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff fe6d 	bl	80021ac <I2C_ITError>
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}

080024da <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	2200      	movs	r2, #0
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	2200      	movs	r2, #0
 8002506:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	0018      	movs	r0, r3
 800250c:	f7ff ff30 	bl	8002370 <I2C_TreatErrorCallback>
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b004      	add	sp, #16
 8002516:	bd80      	pop	{r7, pc}

08002518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002528:	e021      	b.n	800256e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	d01e      	beq.n	800256e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002530:	f7fe f8e8 	bl	8000704 <HAL_GetTick>
 8002534:	0002      	movs	r2, r0
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d302      	bcc.n	8002546 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d113      	bne.n	800256e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	2220      	movs	r2, #32
 800254c:	431a      	orrs	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2241      	movs	r2, #65	; 0x41
 8002556:	2120      	movs	r1, #32
 8002558:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2242      	movs	r2, #66	; 0x42
 800255e:	2100      	movs	r1, #0
 8002560:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2240      	movs	r2, #64	; 0x40
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	4013      	ands	r3, r2
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	425a      	negs	r2, r3
 800257e:	4153      	adcs	r3, r2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	001a      	movs	r2, r3
 8002584:	1dfb      	adds	r3, r7, #7
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d0ce      	beq.n	800252a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b004      	add	sp, #16
 8002594:	bd80      	pop	{r7, pc}

08002596 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025a2:	e02b      	b.n	80025fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 f832 	bl	8002614 <I2C_IsAcknowledgeFailed>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d001      	beq.n	80025b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e029      	b.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	3301      	adds	r3, #1
 80025bc:	d01e      	beq.n	80025fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025be:	f7fe f8a1 	bl	8000704 <HAL_GetTick>
 80025c2:	0002      	movs	r2, r0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d113      	bne.n	80025fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	2220      	movs	r2, #32
 80025da:	431a      	orrs	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2241      	movs	r2, #65	; 0x41
 80025e4:	2120      	movs	r1, #32
 80025e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2242      	movs	r2, #66	; 0x42
 80025ec:	2100      	movs	r1, #0
 80025ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	2100      	movs	r1, #0
 80025f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e007      	b.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2202      	movs	r2, #2
 8002604:	4013      	ands	r3, r2
 8002606:	2b02      	cmp	r3, #2
 8002608:	d1cc      	bne.n	80025a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b004      	add	sp, #16
 8002612:	bd80      	pop	{r7, pc}

08002614 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2210      	movs	r2, #16
 8002628:	4013      	ands	r3, r2
 800262a:	2b10      	cmp	r3, #16
 800262c:	d151      	bne.n	80026d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800262e:	e021      	b.n	8002674 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	3301      	adds	r3, #1
 8002634:	d01e      	beq.n	8002674 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002636:	f7fe f865 	bl	8000704 <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	429a      	cmp	r2, r3
 8002644:	d302      	bcc.n	800264c <I2C_IsAcknowledgeFailed+0x38>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d113      	bne.n	8002674 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	2220      	movs	r2, #32
 8002652:	431a      	orrs	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2241      	movs	r2, #65	; 0x41
 800265c:	2120      	movs	r1, #32
 800265e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2242      	movs	r2, #66	; 0x42
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	2100      	movs	r1, #0
 800266e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e02f      	b.n	80026d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2220      	movs	r2, #32
 800267c:	4013      	ands	r3, r2
 800267e:	2b20      	cmp	r3, #32
 8002680:	d1d6      	bne.n	8002630 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2210      	movs	r2, #16
 8002688:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff fe94 	bl	80023c2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	490d      	ldr	r1, [pc, #52]	; (80026dc <I2C_IsAcknowledgeFailed+0xc8>)
 80026a6:	400a      	ands	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	2204      	movs	r2, #4
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2241      	movs	r2, #65	; 0x41
 80026ba:	2120      	movs	r1, #32
 80026bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2242      	movs	r2, #66	; 0x42
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2240      	movs	r2, #64	; 0x40
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b004      	add	sp, #16
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	fe00e800 	.word	0xfe00e800

080026e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	0008      	movs	r0, r1
 80026ea:	0011      	movs	r1, r2
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	240a      	movs	r4, #10
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	1c02      	adds	r2, r0, #0
 80026f4:	801a      	strh	r2, [r3, #0]
 80026f6:	2009      	movs	r0, #9
 80026f8:	183b      	adds	r3, r7, r0
 80026fa:	1c0a      	adds	r2, r1, #0
 80026fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	6a3a      	ldr	r2, [r7, #32]
 8002706:	0d51      	lsrs	r1, r2, #21
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	00d2      	lsls	r2, r2, #3
 800270c:	400a      	ands	r2, r1
 800270e:	490e      	ldr	r1, [pc, #56]	; (8002748 <I2C_TransferConfig+0x68>)
 8002710:	430a      	orrs	r2, r1
 8002712:	43d2      	mvns	r2, r2
 8002714:	401a      	ands	r2, r3
 8002716:	0011      	movs	r1, r2
 8002718:	193b      	adds	r3, r7, r4
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	059b      	lsls	r3, r3, #22
 800271e:	0d9a      	lsrs	r2, r3, #22
 8002720:	183b      	adds	r3, r7, r0
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	0418      	lsls	r0, r3, #16
 8002726:	23ff      	movs	r3, #255	; 0xff
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	4003      	ands	r3, r0
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	431a      	orrs	r2, r3
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b005      	add	sp, #20
 8002744:	bd90      	pop	{r4, r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	03ff63ff 	.word	0x03ff63ff

0800274c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	000a      	movs	r2, r1
 8002756:	1cbb      	adds	r3, r7, #2
 8002758:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <I2C_Enable_IRQ+0xc8>)
 8002764:	429a      	cmp	r2, r3
 8002766:	d004      	beq.n	8002772 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800276c:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <I2C_Enable_IRQ+0xcc>)
 800276e:	429a      	cmp	r2, r3
 8002770:	d121      	bne.n	80027b6 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002772:	1cbb      	adds	r3, r7, #2
 8002774:	2200      	movs	r2, #0
 8002776:	5e9b      	ldrsh	r3, [r3, r2]
 8002778:	2b00      	cmp	r3, #0
 800277a:	da03      	bge.n	8002784 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	22b8      	movs	r2, #184	; 0xb8
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002784:	1cbb      	adds	r3, r7, #2
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	2b10      	cmp	r3, #16
 800278a:	d103      	bne.n	8002794 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2290      	movs	r2, #144	; 0x90
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002794:	1cbb      	adds	r3, r7, #2
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	2b20      	cmp	r3, #32
 800279a:	d103      	bne.n	80027a4 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2260      	movs	r2, #96	; 0x60
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027a4:	1cbb      	adds	r3, r7, #2
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d127      	bne.n	80027fc <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027b4:	e022      	b.n	80027fc <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027b6:	1cbb      	adds	r3, r7, #2
 80027b8:	2200      	movs	r2, #0
 80027ba:	5e9b      	ldrsh	r3, [r3, r2]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	da03      	bge.n	80027c8 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	22b8      	movs	r2, #184	; 0xb8
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027c8:	1cbb      	adds	r3, r7, #2
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	d003      	beq.n	80027da <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	22f2      	movs	r2, #242	; 0xf2
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027da:	1cbb      	adds	r3, r7, #2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	2202      	movs	r2, #2
 80027e0:	4013      	ands	r3, r2
 80027e2:	d003      	beq.n	80027ec <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	22f4      	movs	r2, #244	; 0xf4
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027ec:	1cbb      	adds	r3, r7, #2
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d103      	bne.n	80027fc <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b004      	add	sp, #16
 8002812:	bd80      	pop	{r7, pc}
 8002814:	080015a9 	.word	0x080015a9
 8002818:	080017c1 	.word	0x080017c1

0800281c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	000a      	movs	r2, r1
 8002826:	1cbb      	adds	r3, r7, #2
 8002828:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800282e:	1cbb      	adds	r3, r7, #2
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	d010      	beq.n	800285a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2242      	movs	r2, #66	; 0x42
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2241      	movs	r2, #65	; 0x41
 8002844:	5c9b      	ldrb	r3, [r3, r2]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	001a      	movs	r2, r3
 800284a:	2328      	movs	r3, #40	; 0x28
 800284c:	4013      	ands	r3, r2
 800284e:	2b28      	cmp	r3, #40	; 0x28
 8002850:	d003      	beq.n	800285a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	22b0      	movs	r2, #176	; 0xb0
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800285a:	1cbb      	adds	r3, r7, #2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	2202      	movs	r2, #2
 8002860:	4013      	ands	r3, r2
 8002862:	d010      	beq.n	8002886 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2244      	movs	r2, #68	; 0x44
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2241      	movs	r2, #65	; 0x41
 8002870:	5c9b      	ldrb	r3, [r3, r2]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	001a      	movs	r2, r3
 8002876:	2328      	movs	r3, #40	; 0x28
 8002878:	4013      	ands	r3, r2
 800287a:	2b28      	cmp	r3, #40	; 0x28
 800287c:	d003      	beq.n	8002886 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	22b0      	movs	r2, #176	; 0xb0
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002886:	1cbb      	adds	r3, r7, #2
 8002888:	2200      	movs	r2, #0
 800288a:	5e9b      	ldrsh	r3, [r3, r2]
 800288c:	2b00      	cmp	r3, #0
 800288e:	da03      	bge.n	8002898 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	22b8      	movs	r2, #184	; 0xb8
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002898:	1cbb      	adds	r3, r7, #2
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	2b10      	cmp	r3, #16
 800289e:	d103      	bne.n	80028a8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2290      	movs	r2, #144	; 0x90
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028a8:	1cbb      	adds	r3, r7, #2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d103      	bne.n	80028b8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028b8:	1cbb      	adds	r3, r7, #2
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d103      	bne.n	80028c8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	43d9      	mvns	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	400a      	ands	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	46bd      	mov	sp, r7
 80028de:	b004      	add	sp, #16
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2241      	movs	r2, #65	; 0x41
 80028f2:	5c9b      	ldrb	r3, [r3, r2]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d138      	bne.n	800296c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	5c9b      	ldrb	r3, [r3, r2]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002904:	2302      	movs	r3, #2
 8002906:	e032      	b.n	800296e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	2101      	movs	r1, #1
 800290e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2241      	movs	r2, #65	; 0x41
 8002914:	2124      	movs	r1, #36	; 0x24
 8002916:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2101      	movs	r1, #1
 8002924:	438a      	bics	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4911      	ldr	r1, [pc, #68]	; (8002978 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002934:	400a      	ands	r2, r1
 8002936:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6819      	ldr	r1, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2101      	movs	r1, #1
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2241      	movs	r2, #65	; 0x41
 800295c:	2120      	movs	r1, #32
 800295e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2240      	movs	r2, #64	; 0x40
 8002964:	2100      	movs	r1, #0
 8002966:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	b002      	add	sp, #8
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	ffffefff 	.word	0xffffefff

0800297c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2241      	movs	r2, #65	; 0x41
 800298a:	5c9b      	ldrb	r3, [r3, r2]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	d139      	bne.n	8002a06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2240      	movs	r2, #64	; 0x40
 8002996:	5c9b      	ldrb	r3, [r3, r2]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800299c:	2302      	movs	r3, #2
 800299e:	e033      	b.n	8002a08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	2101      	movs	r1, #1
 80029a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2241      	movs	r2, #65	; 0x41
 80029ac:	2124      	movs	r1, #36	; 0x24
 80029ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2101      	movs	r1, #1
 80029bc:	438a      	bics	r2, r1
 80029be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2241      	movs	r2, #65	; 0x41
 80029f6:	2120      	movs	r1, #32
 80029f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
  }
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	fffff0ff 	.word	0xfffff0ff

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e301      	b.n	800302a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d100      	bne.n	8002a32 <HAL_RCC_OscConfig+0x1e>
 8002a30:	e08d      	b.n	8002b4e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a32:	4bc3      	ldr	r3, [pc, #780]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	220c      	movs	r2, #12
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d00e      	beq.n	8002a5c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a3e:	4bc0      	ldr	r3, [pc, #768]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	220c      	movs	r2, #12
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d116      	bne.n	8002a78 <HAL_RCC_OscConfig+0x64>
 8002a4a:	4bbd      	ldr	r3, [pc, #756]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	025b      	lsls	r3, r3, #9
 8002a52:	401a      	ands	r2, r3
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	025b      	lsls	r3, r3, #9
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	4bb8      	ldr	r3, [pc, #736]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	029b      	lsls	r3, r3, #10
 8002a64:	4013      	ands	r3, r2
 8002a66:	d100      	bne.n	8002a6a <HAL_RCC_OscConfig+0x56>
 8002a68:	e070      	b.n	8002b4c <HAL_RCC_OscConfig+0x138>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d000      	beq.n	8002a74 <HAL_RCC_OscConfig+0x60>
 8002a72:	e06b      	b.n	8002b4c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e2d8      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_OscConfig+0x7c>
 8002a80:	4baf      	ldr	r3, [pc, #700]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4bae      	ldr	r3, [pc, #696]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	0249      	lsls	r1, r1, #9
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e02f      	b.n	8002af0 <HAL_RCC_OscConfig+0xdc>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10c      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x9e>
 8002a98:	4ba9      	ldr	r3, [pc, #676]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4ba8      	ldr	r3, [pc, #672]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a9e:	49a9      	ldr	r1, [pc, #676]	; (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	4ba6      	ldr	r3, [pc, #664]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4ba5      	ldr	r3, [pc, #660]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002aaa:	49a7      	ldr	r1, [pc, #668]	; (8002d48 <HAL_RCC_OscConfig+0x334>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e01e      	b.n	8002af0 <HAL_RCC_OscConfig+0xdc>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xc4>
 8002aba:	4ba1      	ldr	r3, [pc, #644]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4ba0      	ldr	r3, [pc, #640]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	02c9      	lsls	r1, r1, #11
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	4b9d      	ldr	r3, [pc, #628]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b9c      	ldr	r3, [pc, #624]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	0249      	lsls	r1, r1, #9
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0xdc>
 8002ad8:	4b99      	ldr	r3, [pc, #612]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b98      	ldr	r3, [pc, #608]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ade:	4999      	ldr	r1, [pc, #612]	; (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	4b96      	ldr	r3, [pc, #600]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b95      	ldr	r3, [pc, #596]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002aea:	4997      	ldr	r1, [pc, #604]	; (8002d48 <HAL_RCC_OscConfig+0x334>)
 8002aec:	400a      	ands	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d014      	beq.n	8002b22 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fd fe04 	bl	8000704 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b02:	f7fd fdff 	bl	8000704 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e28a      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b14:	4b8a      	ldr	r3, [pc, #552]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	029b      	lsls	r3, r3, #10
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0xee>
 8002b20:	e015      	b.n	8002b4e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fd fdef 	bl	8000704 <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fd fdea 	bl	8000704 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e275      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	4b80      	ldr	r3, [pc, #512]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	4013      	ands	r3, r2
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x118>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2202      	movs	r2, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	d100      	bne.n	8002b5a <HAL_RCC_OscConfig+0x146>
 8002b58:	e069      	b.n	8002c2e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b5a:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	220c      	movs	r2, #12
 8002b60:	4013      	ands	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b64:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	220c      	movs	r2, #12
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d11c      	bne.n	8002baa <HAL_RCC_OscConfig+0x196>
 8002b70:	4b73      	ldr	r3, [pc, #460]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	025b      	lsls	r3, r3, #9
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d116      	bne.n	8002baa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7c:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	d005      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e24b      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b6b      	ldr	r3, [pc, #428]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	22f8      	movs	r2, #248	; 0xf8
 8002b98:	4393      	bics	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	00da      	lsls	r2, r3, #3
 8002ba2:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba8:	e041      	b.n	8002c2e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d024      	beq.n	8002bfc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb2:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fd fda1 	bl	8000704 <HAL_GetTick>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc8:	f7fd fd9c 	bl	8000704 <HAL_GetTick>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e227      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2202      	movs	r2, #2
 8002be0:	4013      	ands	r3, r2
 8002be2:	d0f1      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	22f8      	movs	r2, #248	; 0xf8
 8002bea:	4393      	bics	r3, r2
 8002bec:	0019      	movs	r1, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00da      	lsls	r2, r3, #3
 8002bf4:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e018      	b.n	8002c2e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfc:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c02:	2101      	movs	r1, #1
 8002c04:	438a      	bics	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fd fd7c 	bl	8000704 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fd fd77 	bl	8000704 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e202      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c24:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d1f1      	bne.n	8002c12 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2208      	movs	r2, #8
 8002c34:	4013      	ands	r3, r2
 8002c36:	d036      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d019      	beq.n	8002c74 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c40:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c44:	4b3e      	ldr	r3, [pc, #248]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c46:	2101      	movs	r1, #1
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4c:	f7fd fd5a 	bl	8000704 <HAL_GetTick>
 8002c50:	0003      	movs	r3, r0
 8002c52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c56:	f7fd fd55 	bl	8000704 <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1e0      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c68:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d0f1      	beq.n	8002c56 <HAL_RCC_OscConfig+0x242>
 8002c72:	e018      	b.n	8002ca6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c78:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	438a      	bics	r2, r1
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7fd fd40 	bl	8000704 <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fd fd3b 	bl	8000704 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1c6      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d1f1      	bne.n	8002c8a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2204      	movs	r2, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x29e>
 8002cb0:	e0b4      	b.n	8002e1c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb2:	201f      	movs	r0, #31
 8002cb4:	183b      	adds	r3, r7, r0
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	055b      	lsls	r3, r3, #21
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d110      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	0549      	lsls	r1, r1, #21
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	61da      	str	r2, [r3, #28]
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	055b      	lsls	r3, r3, #21
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ce2:	183b      	adds	r3, r7, r0
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_RCC_OscConfig+0x338>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d11a      	bne.n	8002d2a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf4:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_RCC_OscConfig+0x338>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_RCC_OscConfig+0x338>)
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	0049      	lsls	r1, r1, #1
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fd fcff 	bl	8000704 <HAL_GetTick>
 8002d06:	0003      	movs	r3, r0
 8002d08:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0c:	f7fd fcfa 	bl	8000704 <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e185      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_OscConfig+0x338>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d10e      	bne.n	8002d50 <HAL_RCC_OscConfig+0x33c>
 8002d32:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002d38:	2101      	movs	r1, #1
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	621a      	str	r2, [r3, #32]
 8002d3e:	e035      	b.n	8002dac <HAL_RCC_OscConfig+0x398>
 8002d40:	40021000 	.word	0x40021000
 8002d44:	fffeffff 	.word	0xfffeffff
 8002d48:	fffbffff 	.word	0xfffbffff
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_OscConfig+0x35e>
 8002d58:	4bb6      	ldr	r3, [pc, #728]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	4bb5      	ldr	r3, [pc, #724]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d5e:	2101      	movs	r1, #1
 8002d60:	438a      	bics	r2, r1
 8002d62:	621a      	str	r2, [r3, #32]
 8002d64:	4bb3      	ldr	r3, [pc, #716]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	4bb2      	ldr	r3, [pc, #712]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	621a      	str	r2, [r3, #32]
 8002d70:	e01c      	b.n	8002dac <HAL_RCC_OscConfig+0x398>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x380>
 8002d7a:	4bae      	ldr	r3, [pc, #696]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d7c:	6a1a      	ldr	r2, [r3, #32]
 8002d7e:	4bad      	ldr	r3, [pc, #692]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d80:	2104      	movs	r1, #4
 8002d82:	430a      	orrs	r2, r1
 8002d84:	621a      	str	r2, [r3, #32]
 8002d86:	4bab      	ldr	r3, [pc, #684]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d88:	6a1a      	ldr	r2, [r3, #32]
 8002d8a:	4baa      	ldr	r3, [pc, #680]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	621a      	str	r2, [r3, #32]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0x398>
 8002d94:	4ba7      	ldr	r3, [pc, #668]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d96:	6a1a      	ldr	r2, [r3, #32]
 8002d98:	4ba6      	ldr	r3, [pc, #664]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	438a      	bics	r2, r1
 8002d9e:	621a      	str	r2, [r3, #32]
 8002da0:	4ba4      	ldr	r3, [pc, #656]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	4ba3      	ldr	r3, [pc, #652]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002da6:	2104      	movs	r1, #4
 8002da8:	438a      	bics	r2, r1
 8002daa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d014      	beq.n	8002dde <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7fd fca6 	bl	8000704 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	e009      	b.n	8002dd2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fd fca1 	bl	8000704 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	4a9b      	ldr	r2, [pc, #620]	; (8003038 <HAL_RCC_OscConfig+0x624>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e12b      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	4b98      	ldr	r3, [pc, #608]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x3aa>
 8002ddc:	e013      	b.n	8002e06 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dde:	f7fd fc91 	bl	8000704 <HAL_GetTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de6:	e009      	b.n	8002dfc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7fd fc8c 	bl	8000704 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	4a91      	ldr	r2, [pc, #580]	; (8003038 <HAL_RCC_OscConfig+0x624>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e116      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfc:	4b8d      	ldr	r3, [pc, #564]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	2202      	movs	r2, #2
 8002e02:	4013      	ands	r3, r2
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e06:	231f      	movs	r3, #31
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e10:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	4b87      	ldr	r3, [pc, #540]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e16:	4989      	ldr	r1, [pc, #548]	; (800303c <HAL_RCC_OscConfig+0x628>)
 8002e18:	400a      	ands	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2210      	movs	r2, #16
 8002e22:	4013      	ands	r3, r2
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d12a      	bne.n	8002e84 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e2e:	4b81      	ldr	r3, [pc, #516]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e32:	4b80      	ldr	r3, [pc, #512]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e34:	2104      	movs	r1, #4
 8002e36:	430a      	orrs	r2, r1
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e3a:	4b7e      	ldr	r3, [pc, #504]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3e:	4b7d      	ldr	r3, [pc, #500]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e40:	2101      	movs	r1, #1
 8002e42:	430a      	orrs	r2, r1
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7fd fc5d 	bl	8000704 <HAL_GetTick>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e50:	f7fd fc58 	bl	8000704 <HAL_GetTick>
 8002e54:	0002      	movs	r2, r0
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0e3      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e62:	4b74      	ldr	r3, [pc, #464]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	2202      	movs	r2, #2
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d0f1      	beq.n	8002e50 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e6c:	4b71      	ldr	r3, [pc, #452]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e70:	22f8      	movs	r2, #248	; 0xf8
 8002e72:	4393      	bics	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	00da      	lsls	r2, r3, #3
 8002e7c:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
 8002e82:	e034      	b.n	8002eee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	3305      	adds	r3, #5
 8002e8a:	d111      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e8c:	4b69      	ldr	r3, [pc, #420]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e90:	4b68      	ldr	r3, [pc, #416]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e92:	2104      	movs	r1, #4
 8002e94:	438a      	bics	r2, r1
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e98:	4b66      	ldr	r3, [pc, #408]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	22f8      	movs	r2, #248	; 0xf8
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	00da      	lsls	r2, r3, #3
 8002ea8:	4b62      	ldr	r3, [pc, #392]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34
 8002eae:	e01e      	b.n	8002eee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002eb0:	4b60      	ldr	r3, [pc, #384]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb4:	4b5f      	ldr	r3, [pc, #380]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ebc:	4b5d      	ldr	r3, [pc, #372]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec0:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec8:	f7fd fc1c 	bl	8000704 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ed2:	f7fd fc17 	bl	8000704 <HAL_GetTick>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0a2      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ee4:	4b53      	ldr	r3, [pc, #332]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d1f1      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d100      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x4e4>
 8002ef6:	e097      	b.n	8003028 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	220c      	movs	r2, #12
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d100      	bne.n	8002f06 <HAL_RCC_OscConfig+0x4f2>
 8002f04:	e06b      	b.n	8002fde <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d14c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b49      	ldr	r3, [pc, #292]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b48      	ldr	r3, [pc, #288]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f14:	494a      	ldr	r1, [pc, #296]	; (8003040 <HAL_RCC_OscConfig+0x62c>)
 8002f16:	400a      	ands	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fd fbf3 	bl	8000704 <HAL_GetTick>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fd fbee 	bl	8000704 <HAL_GetTick>
 8002f28:	0002      	movs	r2, r0
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e079      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f36:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	049b      	lsls	r3, r3, #18
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f42:	4b3c      	ldr	r3, [pc, #240]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	220f      	movs	r2, #15
 8002f48:	4393      	bics	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f52:	430a      	orrs	r2, r1
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f56:	4b37      	ldr	r3, [pc, #220]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a3a      	ldr	r2, [pc, #232]	; (8003044 <HAL_RCC_OscConfig+0x630>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	4b32      	ldr	r3, [pc, #200]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f70:	4b30      	ldr	r3, [pc, #192]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f76:	2180      	movs	r1, #128	; 0x80
 8002f78:	0449      	lsls	r1, r1, #17
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fd fbc1 	bl	8000704 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fd fbbc 	bl	8000704 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e047      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	049b      	lsls	r3, r3, #18
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x574>
 8002fa6:	e03f      	b.n	8003028 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002fae:	4924      	ldr	r1, [pc, #144]	; (8003040 <HAL_RCC_OscConfig+0x62c>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fd fba6 	bl	8000704 <HAL_GetTick>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fd fba1 	bl	8000704 <HAL_GetTick>
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e02c      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	049b      	lsls	r3, r3, #18
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x5aa>
 8002fdc:	e024      	b.n	8003028 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e01f      	b.n	800302a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_RCC_OscConfig+0x620>)
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	025b      	lsls	r3, r3, #9
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	429a      	cmp	r2, r3
 8003004:	d10e      	bne.n	8003024 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	220f      	movs	r2, #15
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d107      	bne.n	8003024 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	23f0      	movs	r3, #240	; 0xf0
 8003018:	039b      	lsls	r3, r3, #14
 800301a:	401a      	ands	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b008      	add	sp, #32
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	40021000 	.word	0x40021000
 8003038:	00001388 	.word	0x00001388
 800303c:	efffffff 	.word	0xefffffff
 8003040:	feffffff 	.word	0xfeffffff
 8003044:	ffc2ffff 	.word	0xffc2ffff

08003048 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0b3      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	4013      	ands	r3, r2
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d911      	bls.n	800308e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b58      	ldr	r3, [pc, #352]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2201      	movs	r2, #1
 8003070:	4393      	bics	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	4b55      	ldr	r3, [pc, #340]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307c:	4b53      	ldr	r3, [pc, #332]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	4013      	ands	r3, r2
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e09a      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d015      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2204      	movs	r2, #4
 800309e:	4013      	ands	r3, r2
 80030a0:	d006      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030a2:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030a8:	21e0      	movs	r1, #224	; 0xe0
 80030aa:	00c9      	lsls	r1, r1, #3
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	22f0      	movs	r2, #240	; 0xf0
 80030b6:	4393      	bics	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	4b44      	ldr	r3, [pc, #272]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030c0:	430a      	orrs	r2, r1
 80030c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	d040      	beq.n	8003150 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	029b      	lsls	r3, r3, #10
 80030de:	4013      	ands	r3, r2
 80030e0:	d114      	bne.n	800310c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e06e      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	049b      	lsls	r3, r3, #18
 80030f6:	4013      	ands	r3, r2
 80030f8:	d108      	bne.n	800310c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e062      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2202      	movs	r2, #2
 8003104:	4013      	ands	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e05b      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	4393      	bics	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 800311c:	430a      	orrs	r2, r1
 800311e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003120:	f7fd faf0 	bl	8000704 <HAL_GetTick>
 8003124:	0003      	movs	r3, r0
 8003126:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003128:	e009      	b.n	800313e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312a:	f7fd faeb 	bl	8000704 <HAL_GetTick>
 800312e:	0002      	movs	r2, r0
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <HAL_RCC_ClockConfig+0x18c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e042      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	220c      	movs	r2, #12
 8003144:	401a      	ands	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d1ec      	bne.n	800312a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2201      	movs	r2, #1
 8003156:	4013      	ands	r3, r2
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d211      	bcs.n	8003182 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2201      	movs	r2, #1
 8003164:	4393      	bics	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_RCC_ClockConfig+0x184>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	4013      	ands	r3, r2
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d001      	beq.n	8003182 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e020      	b.n	80031c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2204      	movs	r2, #4
 8003188:	4013      	ands	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <HAL_RCC_ClockConfig+0x190>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031a0:	f000 f820 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 80031a4:	0001      	movs	r1, r0
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x188>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	220f      	movs	r2, #15
 80031ae:	4013      	ands	r3, r2
 80031b0:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <HAL_RCC_ClockConfig+0x194>)
 80031b2:	5cd3      	ldrb	r3, [r2, r3]
 80031b4:	000a      	movs	r2, r1
 80031b6:	40da      	lsrs	r2, r3
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_ClockConfig+0x198>)
 80031ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fa5b 	bl	8000678 <HAL_InitTick>
  
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40022000 	.word	0x40022000
 80031d0:	40021000 	.word	0x40021000
 80031d4:	00001388 	.word	0x00001388
 80031d8:	fffff8ff 	.word	0xfffff8ff
 80031dc:	080034d8 	.word	0x080034d8
 80031e0:	20000000 	.word	0x20000000

080031e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b08f      	sub	sp, #60	; 0x3c
 80031e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80031ea:	2314      	movs	r3, #20
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	4a2b      	ldr	r2, [pc, #172]	; (800329c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80031f2:	c313      	stmia	r3!, {r0, r1, r4}
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	4a29      	ldr	r2, [pc, #164]	; (80032a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80031fe:	c313      	stmia	r3!, {r0, r1, r4}
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003208:	2300      	movs	r3, #0
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
 800320c:	2300      	movs	r3, #0
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003218:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	220c      	movs	r2, #12
 8003222:	4013      	ands	r3, r2
 8003224:	2b04      	cmp	r3, #4
 8003226:	d002      	beq.n	800322e <HAL_RCC_GetSysClockFreq+0x4a>
 8003228:	2b08      	cmp	r3, #8
 800322a:	d003      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x50>
 800322c:	e02d      	b.n	800328a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800322e:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003230:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003232:	e02d      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	0c9b      	lsrs	r3, r3, #18
 8003238:	220f      	movs	r2, #15
 800323a:	4013      	ands	r3, r2
 800323c:	2214      	movs	r2, #20
 800323e:	18ba      	adds	r2, r7, r2
 8003240:	5cd3      	ldrb	r3, [r2, r3]
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003244:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	220f      	movs	r2, #15
 800324a:	4013      	ands	r3, r2
 800324c:	1d3a      	adds	r2, r7, #4
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	025b      	lsls	r3, r3, #9
 8003258:	4013      	ands	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800325c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800325e:	4812      	ldr	r0, [pc, #72]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003260:	f7fc ff52 	bl	8000108 <__udivsi3>
 8003264:	0003      	movs	r3, r0
 8003266:	001a      	movs	r2, r3
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	4353      	muls	r3, r2
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
 800326e:	e009      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003272:	000a      	movs	r2, r1
 8003274:	0152      	lsls	r2, r2, #5
 8003276:	1a52      	subs	r2, r2, r1
 8003278:	0193      	lsls	r3, r2, #6
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	185b      	adds	r3, r3, r1
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003288:	e002      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800328e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b00f      	add	sp, #60	; 0x3c
 8003298:	bd90      	pop	{r4, r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	080034b8 	.word	0x080034b8
 80032a0:	080034c8 	.word	0x080034c8
 80032a4:	40021000 	.word	0x40021000
 80032a8:	007a1200 	.word	0x007a1200

080032ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	025b      	lsls	r3, r3, #9
 80032c4:	4013      	ands	r3, r2
 80032c6:	d100      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80032c8:	e08e      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80032ca:	2017      	movs	r0, #23
 80032cc:	183b      	adds	r3, r7, r0
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d2:	4b57      	ldr	r3, [pc, #348]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	055b      	lsls	r3, r3, #21
 80032da:	4013      	ands	r3, r2
 80032dc:	d110      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	4b54      	ldr	r3, [pc, #336]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032e0:	69da      	ldr	r2, [r3, #28]
 80032e2:	4b53      	ldr	r3, [pc, #332]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	0549      	lsls	r1, r1, #21
 80032e8:	430a      	orrs	r2, r1
 80032ea:	61da      	str	r2, [r3, #28]
 80032ec:	4b50      	ldr	r3, [pc, #320]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	055b      	lsls	r3, r3, #21
 80032f4:	4013      	ands	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fa:	183b      	adds	r3, r7, r0
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	4b4c      	ldr	r3, [pc, #304]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4013      	ands	r3, r2
 800330a:	d11a      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330c:	4b49      	ldr	r3, [pc, #292]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b48      	ldr	r3, [pc, #288]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	0049      	lsls	r1, r1, #1
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331a:	f7fd f9f3 	bl	8000704 <HAL_GetTick>
 800331e:	0003      	movs	r3, r0
 8003320:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	e008      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003324:	f7fd f9ee 	bl	8000704 <HAL_GetTick>
 8003328:	0002      	movs	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e077      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4b3f      	ldr	r3, [pc, #252]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4013      	ands	r3, r2
 8003340:	d0f0      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003342:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003344:	6a1a      	ldr	r2, [r3, #32]
 8003346:	23c0      	movs	r3, #192	; 0xc0
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4013      	ands	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d034      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	23c0      	movs	r3, #192	; 0xc0
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4013      	ands	r3, r2
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d02c      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4a33      	ldr	r2, [pc, #204]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800336a:	4013      	ands	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800336e:	4b30      	ldr	r3, [pc, #192]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003370:	6a1a      	ldr	r2, [r3, #32]
 8003372:	4b2f      	ldr	r3, [pc, #188]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	0249      	lsls	r1, r1, #9
 8003378:	430a      	orrs	r2, r1
 800337a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800337c:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800337e:	6a1a      	ldr	r2, [r3, #32]
 8003380:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003382:	492e      	ldr	r1, [pc, #184]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003384:	400a      	ands	r2, r1
 8003386:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003388:	4b29      	ldr	r3, [pc, #164]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7fd f9b5 	bl	8000704 <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339e:	e009      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fd f9b0 	bl	8000704 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	4a25      	ldr	r2, [pc, #148]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e038      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b4:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	2202      	movs	r2, #2
 80033ba:	4013      	ands	r3, r2
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	4b18      	ldr	r3, [pc, #96]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033ce:	430a      	orrs	r2, r1
 80033d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033d2:	2317      	movs	r3, #23
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033e2:	4918      	ldr	r1, [pc, #96]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	4013      	ands	r3, r2
 80033f0:	d009      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	2203      	movs	r2, #3
 80033f8:	4393      	bics	r3, r2
 80033fa:	0019      	movs	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003402:	430a      	orrs	r2, r1
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2220      	movs	r2, #32
 800340c:	4013      	ands	r3, r2
 800340e:	d009      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	2210      	movs	r2, #16
 8003416:	4393      	bics	r3, r2
 8003418:	0019      	movs	r1, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003420:	430a      	orrs	r2, r1
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b006      	add	sp, #24
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	40021000 	.word	0x40021000
 8003434:	40007000 	.word	0x40007000
 8003438:	fffffcff 	.word	0xfffffcff
 800343c:	fffeffff 	.word	0xfffeffff
 8003440:	00001388 	.word	0x00001388
 8003444:	efffffff 	.word	0xefffffff

08003448 <__libc_init_array>:
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	2600      	movs	r6, #0
 800344c:	4d0c      	ldr	r5, [pc, #48]	; (8003480 <__libc_init_array+0x38>)
 800344e:	4c0d      	ldr	r4, [pc, #52]	; (8003484 <__libc_init_array+0x3c>)
 8003450:	1b64      	subs	r4, r4, r5
 8003452:	10a4      	asrs	r4, r4, #2
 8003454:	42a6      	cmp	r6, r4
 8003456:	d109      	bne.n	800346c <__libc_init_array+0x24>
 8003458:	2600      	movs	r6, #0
 800345a:	f000 f821 	bl	80034a0 <_init>
 800345e:	4d0a      	ldr	r5, [pc, #40]	; (8003488 <__libc_init_array+0x40>)
 8003460:	4c0a      	ldr	r4, [pc, #40]	; (800348c <__libc_init_array+0x44>)
 8003462:	1b64      	subs	r4, r4, r5
 8003464:	10a4      	asrs	r4, r4, #2
 8003466:	42a6      	cmp	r6, r4
 8003468:	d105      	bne.n	8003476 <__libc_init_array+0x2e>
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	00b3      	lsls	r3, r6, #2
 800346e:	58eb      	ldr	r3, [r5, r3]
 8003470:	4798      	blx	r3
 8003472:	3601      	adds	r6, #1
 8003474:	e7ee      	b.n	8003454 <__libc_init_array+0xc>
 8003476:	00b3      	lsls	r3, r6, #2
 8003478:	58eb      	ldr	r3, [r5, r3]
 800347a:	4798      	blx	r3
 800347c:	3601      	adds	r6, #1
 800347e:	e7f2      	b.n	8003466 <__libc_init_array+0x1e>
 8003480:	080034e8 	.word	0x080034e8
 8003484:	080034e8 	.word	0x080034e8
 8003488:	080034e8 	.word	0x080034e8
 800348c:	080034ec 	.word	0x080034ec

08003490 <memset>:
 8003490:	0003      	movs	r3, r0
 8003492:	1882      	adds	r2, r0, r2
 8003494:	4293      	cmp	r3, r2
 8003496:	d100      	bne.n	800349a <memset+0xa>
 8003498:	4770      	bx	lr
 800349a:	7019      	strb	r1, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	e7f9      	b.n	8003494 <memset+0x4>

080034a0 <_init>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr

080034ac <_fini>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr
